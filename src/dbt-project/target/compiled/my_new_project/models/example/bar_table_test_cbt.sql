/*
DEMO_TABLE = DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
#TT_TABLE = DEVELOPMENT.WNS_AS_DD_TENDER_TYPE_MAPPING_02FEB
BASKET_MAPPING = DEVELOPMENT.CUST_BASKET_MAPPING
last_updated_date = '2015-01-01' = {0} 
FinYearFinWeek = {1} 
FinYearFinWeek - 1 = {3}
cust_basket_item_table_name ={4}
limit = {5}
comment = {6}
*/

/*0} last_updated_date '2021-01-04' , max last date updated
{1} DEVELOPMENT.CUST_BASKET_ITEM_{1}, DEVELOPMENT.CUST_BASKET_ITEM_Thursday
{2} fin year month and day, if run today, TEMP_CONS_CUST_BASKET_ITEM_202127_Thursday
{4} cust_basket_item  --is name of table
{5} limit
{6} some comment */

--WbVarDef -variable=vlast_updated_date    -query= "select max(last_updated_date) from analytics.fnd_cust_basket";   --{0}
WbVarDef vlast_updated_date  = '2020-01-01' ;   --{0}
WbVarDef -variable=vDayName              -query= "select to_char(current_date-1,'Day')";                          --{1}
WbVarDef -variable=vFinYearWeekNoDay     -query= "Select fin_year_no||fin_week_no from analytics.fnd_calendar where calendar_date = current_date-1";   --{2}
WbVarDef vCBI                  = 'cust_basket_item';                                                                                     --{4]
WbVarDef vLimit                = '';   --{5}
WbVarDef vComment              = '';   --{6}

/*current_date_$[vlast_updated_date];
select $[vDayName];
select $[vFinYearWeekNoDay];
select $[vCBI];
select $[vLimit];
select $[vComment];*/

/*
-- ANALYTICS.FND_CUSTOMER
-- ANALYTICS.FND_CUSTOMER_MASTER
-- ANALYTICS.FND_CUST_BASKET
-- ANALYTICS.FND_CUST_FV_VOUCHER
-- ANALYTICS.FND_CUSTOMER_PORTFOLIO
-- ANALYTICS.FND_CUST_BASKET_TENDER
-- ANALYTICS.FND_CALENDAR
-- ANALYTICS.FND_LOCATION
-- ANALYTICS.FND_WOD_TIER_MTH_DETAIL
-- ANALYTICS.FND_CUST_BASKET_ITEM
-- ANALYTICS.FND_ITEM
-- ANALYTICS.FND_CUST_BASKET_AUX
-- DEVELOPMENT.WNS_AS_DD_TENDER_TYPE_MAPPING_02FEB (fixed, needs t
-- DEVELOPMENT.CUST_BASKET_MAPPING
-- DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
-- DEVELOPMENT.FND_LST_EA_CODES
-- DEVELOPMENT.FND_ROG_SOC_LOCATION
-- analytics.FND_CUSTOMER_CARD
-- DEVELOPMENT.FND_CUST_DERIVED_RACE_REF
*/



/******************************************************************************************************************************************/
/* SCRIPT A - Collating Demographic Details ***********************************************************************************************/
/******************************************************************************************************************************************/

-- CREATE A NEW REFTABLE FOR THE SEP END RUN
CREATE TABLE #wns_nm_DD_TT_UCID_REFTABLE_$[vDayName] AS (
	SELECT perm_ucid_hashed as ucid, SUBSCRIBER_KEY,CUSTOMER_NO,'CARDS' AS CARD_TYPE
	FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
	GROUP BY 1,2,3,4) ;
-- Execution time: 8.44s

CREATE TABLE #wns_nm_DD_UCID_HHI_INFO_$[vDayName] AS (
	SELECT A.*, B.EA_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE
	FROM (
		SELECT UCID,SUBSCRIBER_KEY,CUSTOMER_NO,CARD_TYPE
		FROM #wns_nm_DD_TT_UCID_REFTABLE_$[vDayName]
		GROUP BY 1,2,3,4) A
	LEFT JOIN (
		SELECT CUSTOMER_NO, EA_CODE
		FROM ANALYTICS.FND_CUSTOMER
		GROUP BY 1,2) B
	ON A.CUSTOMER_NO=B.CUSTOMER_NO
	LEFT JOIN (
		SELECT EA_CODE,RACE_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,AVERAGE_ADULT_AGE
		FROM DEVELOPMENT.FND_LST_EA_CODES
		GROUP BY 1,2,3,4,5) C
	ON B.EA_CODE=C.EA_CODE)$[vLimit];
-- Execution time: 16.48s

--ADDING ALL THE REQUIRED INFORMATION IN ONE TABLE(HHI+DEMOGRAPHICS)
CREATE TABLE #wns_nm_DD_UCID_HHI_DEMO_TEMP1 AS (
	SELECT A.*,GENDER AS GENDER,BIRTH_DATE,DERIVED_RACE,AGE_DAYS,AGE_YEARS,LAST_UPDATED_DATE AS INFO_CHANGED_DATE, CURRENT_DATE AS CREATED_DATE
	FROM #wns_nm_DD_UCID_HHI_INFO_$[vDayName] A
	LEFT JOIN (
		SELECT A.*,
				UPPER(DERIVED_RACE)  AS DERIVED_RACE,
				(CURRENT_DATE -A.BIRTH_DATE) AS AGE_DAYS,
				(CURRENT_DATE -A.BIRTH_DATE)/365 AS AGE_YEARS
		FROM ANALYTICS.FND_CUSTOMER_MASTER A
		LEFT JOIN DEVELOPMENT.FND_CUST_DERIVED_RACE_REF B
			ON UPPER(A.LAST_NAME)=UPPER(B.SURNAME)) B
		ON A.SUBSCRIBER_KEY=B.MASTER_SUBSCRIBER_KEY)$[vLimit];
-- Execution time: 35.36s

--CREATING TABLE TO DERIVE AGE AND GENDER FROM ID INFORMATION
CREATE TABLE #wns_nm_DD_DEMOGOG_STAGING AS (
	SELECT SUBSCRIBER_KEY,CUSTOMER_NO,CARD_ID,GENDER,TRUNC(DOB) AS DOB,
			(CURRENT_DATE-TRUNC(DOB)) AS AGE,
			(CURRENT_DATE-TRUNC(DOB))/365 AS AGE_YEARS
	FROM (
		SELECT SUBSCRIBER_KEY,CUSTOMER_NO,CARD_ID,
				CASE WHEN GEND_IND BETWEEN 0000 AND 4999 THEN 'F'
					 WHEN GEND_IND BETWEEN 5000 AND 9999 THEN 'M'
					 ELSE 'UNKNOWN' END AS GENDER,
				CASE WHEN DATE_PART_YEAR(BIRTH_DATE) BETWEEN 2000 AND 2019 THEN BIRTH_DATE
					 WHEN DATE_PART_YEAR(BIRTH_DATE)BETWEEN 1900 AND 1919 THEN  DATEADD(YEAR,100,BIRTH_DATE)
					 WHEN DATE_PART_YEAR(BIRTH_DATE) BETWEEN 1920 AND 1999 THEN BIRTH_DATE
					 ELSE DATEADD(YEAR,-100,BIRTH_DATE) END AS DOB
		FROM (
			SELECT SUBSCRIBER_KEY,CUSTOMER_NO,CARD_ID,TRUNC(TO_DATE(LEFT(CARD_ID,6),'YYMMDD'))AS BIRTH_DATE,SUBSTRING(CARD_ID,7,4) AS GEND_IND
			FROM (
				SELECT SUBSCRIBER_KEY,CUSTOMER_NO,MAX(CARD_ID) AS CARD_ID
				FROM (
					SELECT SUBSCRIBER_KEY ,CUSTOMER_NO , CARDHOLDER_IDENTITY_NO AS CARD_ID
					FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
					WHERE CARD_ID IS NOT NULL AND CARD_ID <> -1)
					GROUP BY 1,2))))$[vLimit];
-- Execution time: 8.34s

---AGE FROM ID INFORMATION
CREATE TABLE #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2 AS (
	SELECT A.UCID, A.SUBSCRIBER_KEY , A.CUSTOMER_NO,A.CARD_TYPE,A.EA_CODE,A.INCOME_CLASS,A.HOUSEHOLD_INCOME_SUBRANGE,A.DERIVED_RACE,
			CASE WHEN B.AGE IS NULL THEN A.AGE_DAYS ELSE B.AGE END AS AGE_DAYS,
			CASE WHEN B.AGE_YEARS IS NULL THEN A.AGE_YEARS ELSE B.AGE_YEARS END AS AGE_YEARS,
			CASE WHEN B.GENDER IS NULL THEN A.GENDER ELSE B.GENDER END AS GENDER,
			CASE WHEN B.DOB IS NULL THEN A.BIRTH_DATE ELSE B.DOB END AS BIRTH_DATE,
			INFO_CHANGED_DATE,
			CREATED_DATE
	FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP1 A
	LEFT JOIN #wns_nm_DD_DEMOGOG_STAGING B
		ON A.SUBSCRIBER_KEY=B.SUBSCRIBER_KEY
			AND A.CUSTOMER_NO=B.CUSTOMER_NO)$[vLimit];
-- Execution time: 21.33s

--------REMOVING DUPLICATES AT UCID, SUBSCRIBER_KEY LEVEL
CREATE TABLE  #wns_nm_DD_UCID_HHI_DEMO_TEMP2 AS
	SELECT UCID,SUBSCRIBER_KEY,CARD_TYPE,EA_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,
			DERIVED_RACE,BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
	FROM
		(SELECT UCID,SUBSCRIBER_KEY,CARD_TYPE,EA_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,
				DERIVED_RACE,BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2
		WHERE UCID IN (
			SELECT UCID FROM (
				SELECT UCID, SUBSCRIBER_KEY, COUNT(*)AS CNT
				FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2
				GROUP BY 1,2)
			WHERE CNT=1)
		ORDER BY UCID)
		UNION
		(SELECT UCID,SUBSCRIBER_KEY,CARD_TYPE,EA_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,
				DERIVED_RACE,BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2
		WHERE UCID IN (
			SELECT UCID FROM (
				SELECT UCID, SUBSCRIBER_KEY, COUNT(*)AS CNT
				FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2
				GROUP BY 1,2)
			WHERE CNT>1)
			AND CUSTOMER_NO IS NOT NULL
		GROUP BY UCID,SUBSCRIBER_KEY,CARD_TYPE,EA_CODE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,
				DERIVED_RACE,BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		ORDER BY UCID)$[vLimit];
-- Execution time: 47.39s

--------REMOVING DUPLICATES AT UCID
CREATE TABLE  #wns_nm_DD_UCID_HHI_DEMO_TEMP3 AS
	SELECT UCID,CARD_TYPE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
			BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
	FROM
		(SELECT UCID,CARD_TYPE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
				BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP2
		WHERE UCID IN (
			SELECT UCID FROM (
				SELECT UCID, COUNT(*)AS CNT
				FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP2
				GROUP BY 1)
			WHERE CNT=1)
		ORDER BY UCID)
		UNION
		(SELECT UCID,CARD_TYPE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
				BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP2
		WHERE UCID IN (
			SELECT UCID FROM (
				SELECT UCID, COUNT(*)AS CNT
				FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP2
				GROUP BY 1)
			WHERE CNT>1)
		AND SUBSCRIBER_KEY IS NOT NULL
		GROUP BY UCID,CARD_TYPE,INCOME_CLASS,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
				BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		ORDER BY UCID)$[vLimit];
-- Execution time: 15.12s

--FINAL TABLE -- CONSIDERING THE UCID WITH LATEST MODIFIED INFORMATION
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName];
CREATE TABLE DEVELOPMENT.WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName]
	DISTSTYLE ALL AS
		SELECT UCID, CARD_TYPE, INCOME_CLASS, HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
				BIRTH_DATE,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
		FROM (
			SELECT UCID, CARD_TYPE, INCOME_CLASS, HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
					BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
			FROM (
				SELECT * FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP3 WHERE UCID IN (
					SELECT UCID FROM (
						SELECT UCID, COUNT(*)AS CNT
						FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP3
						GROUP BY 1)
					WHERE CNT=1) -- AND ( INCOME_CLASS IS NOT NULL )
				ORDER BY UCID,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,BIRTH_DATE,
						AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE)
				UNION
				SELECT UCID, CARD_TYPE, INCOME_CLASS, HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
						BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE
				FROM (
					SELECT UCID, CARD_TYPE, INCOME_CLASS, HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,
							BIRTH_DATE,AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE,
					ROW_NUMBER() OVER(PARTITION BY UCID ORDER BY INFO_CHANGED_DATE DESC,DERIVED_RACE DESC,AGE_DAYS ASC,GENDER ASC) AS RN
					FROM (
						SELECT * FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP3
						WHERE UCID IN (
							SELECT UCID FROM (
								SELECT UCID, COUNT(*)AS CNT
								FROM #wns_nm_DD_UCID_HHI_DEMO_TEMP3
								GROUP BY 1)
							WHERE CNT>1) -- AND ( INCOME_CLASS IS NOT NULL )
						AND (INCOME_CLASS <>-1 AND INCOME_CLASS<>' ' AND INCOME_CLASS IS NOT NULL )
						ORDER BY UCID,HOUSEHOLD_INCOME_SUBRANGE,DERIVED_RACE,BIRTH_DATE,
								AGE_DAYS,AGE_YEARS,GENDER,INFO_CHANGED_DATE,CREATED_DATE))
				WHERE RN=1)$[vLimit];
-- Execution time: 18.21s

DROP TABLE IF EXISTS #wns_nm_DD_TT_UCID_REFTABLE_$[vDayName];
DROP TABLE IF EXISTS #wns_nm_DD_UCID_HHI_INFO_$[vDayName];
DROP TABLE IF EXISTS #wns_nm_DD_UCID_HHI_DEMO_TEMP1;
DROP TABLE IF EXISTS #wns_nm_DD_DEMOGOG_STAGING;
DROP TABLE IF EXISTS #wns_nm_DD_UCID_HHI_DEMO_TEMP1_2;
DROP TABLE IF EXISTS #wns_nm_DD_UCID_HHI_DEMO_TEMP2;
DROP TABLE IF EXISTS #wns_nm_DD_UCID_HHI_DEMO_TEMP3;


/******************************************************************************************************************************************/
/* SCRIPT A - END                                                                                                         *****************/
/******************************************************************************************************************************************/








/******************************************************************************************************************************************/
/* SCRIPT B - Creating base table from CUST_BASKET data using loyalty, promotional, voucher & calendar details ****************************/
/******************************************************************************************************************************************/

-- Snapshot of the CUST_BASKET table
CREATE TABLE #wns_nm_DD_FND_CUST_BASKET_TEMP
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT LOCATION_NO, TILL_NO, TRAN_NO, TRAN_DATE, TRAN_TIME, TRAN_TYPE, TRAN_SELLING, DISCOUNT_SELLING, WASTE_IND,
				LOYALTY_WW_SWIPE_NO, LOYALTY_EXT_SWIPE_NO, CUSTOMER_NO,VMP_IND,
				ROW_NUMBER() OVER(PARTITION BY TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO ORDER BY LAST_UPDATED_DATE DESC) AS LATEST_FLAG
		FROM ANALYTICS.FND_CUST_BASKET
		WHERE last_updated_date = '$[vlast_updated_date]') $[vLimit];
-- Execution time: 1m 22s

-- REMOVING OLDER ROWS OF A TRANSACTION
DELETE FROM #wns_nm_DD_FND_CUST_BASKET_TEMP WHERE LATEST_FLAG>1;
-- 0 rows affected
-- Execution time: 0.18s

drop table if exists development.wns_adj_new_pos_logic_$[vDayName] ;
create table development.wns_adj_new_pos_logic_$[vDayName]
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) as
select  a.LOCATION_NO, a.TILL_NO, a.TRAN_NO, a.TRAN_DATE, a.TRAN_TIME,  TRAN_SELLING, DISCOUNT_SELLING, WASTE_IND,
                LOYALTY_WW_SWIPE_NO, LOYALTY_EXT_SWIPE_NO, CUSTOMER_NO,VMP_IND,
--case when item_tran_type  in ('R','V','Q','S') then item_tran_type else tran_type end as tran_type_new,
nvl(item_tran_type,tran_type) as tran_type
from #wns_nm_DD_FND_CUST_BASKET_TEMP A
left join (select TRAN_DATE,LOCATION_NO,TILL_NO,TRAN_NO,
				case when item_TRAN_TYPE in ('R','Q','V') then item_TRAN_TYPE else null end as item_TRAN_TYPE
			from(
				select TRAN_DATE,LOCATION_NO,TILL_NO,TRAN_NO,
				count(distinct TRAN_TYPE) as item_TRAN_TYPE_count,
				max( TRAN_TYPE) as item_TRAN_TYPE
				from analytics.fnd_cust_basket_item
				group by 1,2,3,4
                ) where item_TRAN_TYPE_count=1
           ) B
           ON A.TRAN_DATE=B.TRAN_DATE
           AND A.LOCATION_NO=B.LOCATION_NO
           AND A.TILL_NO=B.TILL_NO
           AND A.TRAN_NO=B.TRAN_NO;

CREATE TABLE #wns_nm_DD_CUST_BASKET_UCID
    DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
        SELECT A.LOCATION_NO ,
                A.TILL_NO ,
                A.TRAN_NO ,
                A.TRAN_DATE ,
                A.TRAN_TIME ,
                A.TRAN_TYPE ,
                A.WASTE_IND ,
                A.TRAN_SELLING ,
                A.DISCOUNT_SELLING ,
                A.LOYALTY_WW_SWIPE_NO ,A.LOYALTY_EXT_SWIPE_NO ,
                A.CUSTOMER_NO ,A.VMP_IND,
               (CASE WHEN A.TRAN_TYPE='S' THEN 1 WHEN A.TRAN_TYPE='V' THEN -1 ELSE 0 END) AS TRAN_IND,
                B.UCID
        FROM development.wns_adj_new_pos_logic_$[vDayName] A
        LEFT JOIN (SELECT TRAN_DATE,LOCATION_NO,TILL_NO,TRAN_NO, MAX(PERM_UCID_HASHED) as UCID FROM DEVELOPMENT.CUST_BASKET_MAPPING
                    GROUP BY 1,2,3,4) B
        ON A.TRAN_DATE=B.TRAN_DATE
           AND A.LOCATION_NO=B.LOCATION_NO
           AND A.TILL_NO=B.TILL_NO
           AND A.TRAN_NO=B.TRAN_NO)$[vLimit];
-- Execution time: 52.55s
drop table if exists development.wns_adj_new_pos_logic_$[vDayName] ;


CREATE TABLE #wns_nm_DD_CUST_BASKET_UCID_TYPE_TEMP DISTSTYLE ALL AS (
	SELECT perm_ucid_hashed as UCID,UCID_TYPE
	FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
	GROUP BY 1,2)$[vLimit];
-- Execution time: 18.34s

-- ATTACH UCID_TYPE TO THE DATA
CREATE TABLE #wns_nm_DD_CUST_BASKET_UCID_TYPE
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.LOCATION_NO, A.TILL_NO, A.TRAN_NO, A.TRAN_DATE, A.TRAN_TIME, A.TRAN_TYPE, A.WASTE_IND,
				A.LOYALTY_WW_SWIPE_NO, A.LOYALTY_EXT_SWIPE_NO, A.CUSTOMER_NO,A.VMP_IND, A.TRAN_IND, A.UCID, A.TRAN_SELLING,
				A.DISCOUNT_SELLING, C.AGE_YEARS AS AGE, C.DERIVED_RACE AS RACE, C.GENDER AS GENDER,
				C.HOUSEHOLD_INCOME_SUBRANGE AS HOUSEHOLD_INCOME, B.UCID_TYPE
		FROM #wns_nm_DD_CUST_BASKET_UCID A
		LEFT JOIN #wns_nm_DD_CUST_BASKET_UCID_TYPE_TEMP B
		ON A.UCID=B.UCID
		LEFT JOIN DEVELOPMENT.WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName] C
	    ON A.UCID=C.UCID)$[vLimit];
-- Execution time: 58.12s

CREATE TABLE #wns_nm_DD_FND_FV_VOUCHER_TEMP
	DISTKEY(REDEEMED_DATE) COMPOUND SORTKEY(REDEEMED_DATE, REDEEMED_STORE, REDEEMED_TILL_NO, REDEEMED_TRAN_NO) AS (
		SELECT REDEEMED_DATE, REDEEMED_STORE, REDEEMED_TILL_NO, REDEEMED_TRAN_NO,
				COUNT(DISTINCT VOUCHER_NO) AS VOUCHER_COUNT,
				SUM(REDEEMED_AMOUNT) AS VOUCHER_DISCOUNT
		FROM ANALYTICS.FND_CUST_FV_VOUCHER
		WHERE REDEEMED_DATE IS NOT NULL
			AND last_updated_date = '$[vlast_updated_date]'
		GROUP BY 1,2,3,4 )$[vLimit];
-- Execution time: 13.51s

-- ATTACH VOUCHER INFORMATION
CREATE TABLE #wns_nm_DD_CA_TRAN_LEVEL_VOUCHER_FLAG
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*,
				CASE WHEN B.REDEEMED_DATE IS NULL THEN 0 ELSE 1 END AS VOUCHER_FLAG,
				VOUCHER_COUNT, VOUCHER_DISCOUNT
		FROM #wns_nm_DD_CUST_BASKET_UCID_TYPE A
		LEFT JOIN #wns_nm_DD_FND_FV_VOUCHER_TEMP B
				ON A.TRAN_DATE=B.REDEEMED_DATE
				AND A.LOCATION_NO=B.REDEEMED_STORE
				AND A.TILL_NO=B.REDEEMED_TILL_NO
				AND A.TRAN_NO=B.REDEEMED_TRAN_NO)$[vLimit];
-- Execution time: 52.41s

CREATE TABLE #wns_nm_DD_CA_UCID_LEVEL_CUST_ACQ
	DISTSTYLE ALL AS (
		SELECT UCID, MIN(PORTFOLIO_CREATE_DATE) AS ACQUISITION_DATE
		FROM (SELECT B.UCID, B.CUSTOMER_NO, C.PORTFOLIO_CREATE_DATE
				FROM (SELECT perm_ucid_hashed as UCID, CUSTOMER_NO
						FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING GROUP BY 1,2) B -- CHANGE HERE TO DEVELOPMENT.AJL_DIM_CUSTOMER_CARD_MAPPING_NO_CUTOFF_202013_V2 [NM]
				LEFT JOIN (SELECT CUSTOMER_NO, PORTFOLIO_CREATE_DATE, PRODUCT_CODE_NO
							FROM ANALYTICS.FND_CUSTOMER_PORTFOLIO
							WHERE PRODUCT_CODE_NO IN ('0','1','2','3','4','5','6','7','8','9','10','11','15','16','19','20','21','28') ) C --TO BE CHANGED [NM]
				ON B.CUSTOMER_NO=C.CUSTOMER_NO) D
		GROUP BY 1)$[vLimit];
-- Execution time: 15.71s

CREATE TABLE #wns_nm_DD_CA_TRAN_LEVEL_CUST_ACQ
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.LOCATION_NO, A.TILL_NO, A.TRAN_NO, A.TRAN_DATE, A.TRAN_TIME, A.TRAN_TYPE, A.TRAN_SELLING, A.DISCOUNT_SELLING, A.WASTE_IND,
				A.LOYALTY_WW_SWIPE_NO, A.LOYALTY_EXT_SWIPE_NO, A.CUSTOMER_NO, A.VMP_IND,A.TRAN_IND, A.UCID, A.UCID_TYPE, A.AGE, A.RACE, A.GENDER,
				A.HOUSEHOLD_INCOME, A.VOUCHER_FLAG, A.VOUCHER_COUNT, A.VOUCHER_DISCOUNT,
				CASE WHEN ACQUISITION_DATE IS NULL THEN '1999-01-01'
					WHEN ACQUISITION_DATE<'1999-01-01' THEN '1999-01-01' -- THE FIRST DATE IN CUST_BASKET IS 1999-06-04
					WHEN ACQUISITION_DATE>=(CURRENT_DATE+1) THEN CURRENT_DATE
						ELSE ACQUISITION_DATE END AS ACQUISITION_DATE
		FROM #wns_nm_DD_CA_TRAN_LEVEL_VOUCHER_FLAG A
		LEFT JOIN #wns_nm_DD_CA_UCID_LEVEL_CUST_ACQ B
				ON A.UCID=B.UCID)$[vLimit];
-- Execution time: 57.6s

CREATE TABLE #wns_nm_DD_SHK_CUSTOMER_CARD_MAPPING_SUB
	DISTSTYLE ALL AS (
		SELECT CARD_NO, CUSTOMER_NO
		FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
		GROUP BY 1,2)$[vLimit];
-- Execution time: 1m 0s

-- ATTACH CUSTOMER NO BASED ON LOYALTY_WW_SWIPE_NO
CREATE TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2_1
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*, B.CUSTOMER_NO AS C2_CUSTOMER_NO_1
		FROM #wns_nm_DD_CA_TRAN_LEVEL_CUST_ACQ A
		LEFT JOIN #wns_nm_DD_SHK_CUSTOMER_CARD_MAPPING_SUB B
				ON A.LOYALTY_WW_SWIPE_NO=B.CARD_NO)$[vLimit];
-- Execution time: 54.67s

-- ATTACH CUSTOMER NO BASED ON LOYALTY_EXT_SWIPE_NO
CREATE TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2_2
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*,B.CUSTOMER_NO AS C2_CUSTOMER_NO_2
			FROM #wns_nm_DD_CA_TRAN_LEVEL_CUST_ACQ A
			LEFT JOIN #wns_nm_DD_SHK_CUSTOMER_CARD_MAPPING_SUB B
			ON A.LOYALTY_EXT_SWIPE_NO=B.CARD_NO)$[vLimit];
-- Execution time: 49.84s

-- PICKING THE AVAILABLE CUSTOMER NO
CREATE TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*,
				CASE WHEN A.C2_CUSTOMER_NO_1 IS NULL THEN B.C2_CUSTOMER_NO_2 ELSE A.C2_CUSTOMER_NO_1 END AS C2_CUSTOMER_NO,
				CASE WHEN A.LOYALTY_WW_SWIPE_NO IS NULL THEN 0 ELSE 1 END AS WREWARDS_SWIPE_IND,
				CASE WHEN A.LOYALTY_EXT_SWIPE_NO IS NULL THEN 0 ELSE 1 END AS MYSCHOOL_SWIPE_IND
		FROM #wns_nm_DD_CA_TRAN_LEVEL_C2_1 A
		LEFT JOIN #wns_nm_DD_CA_TRAN_LEVEL_C2_2 B
				ON A.TRAN_DATE=B.TRAN_DATE
					AND A.LOCATION_NO=B.LOCATION_NO
					AND A.TILL_NO=B.TILL_NO
					AND A.TRAN_NO=B.TRAN_NO)$[vLimit];
-- Execution time: 1m 1s

ALTER TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2 DROP COLUMN LOYALTY_WW_SWIPE_NO;
ALTER TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2 DROP COLUMN LOYALTY_EXT_SWIPE_NO;
ALTER TABLE #wns_nm_DD_CA_TRAN_LEVEL_C2 DROP COLUMN C2_CUSTOMER_NO_1;
-- Total script execution time: 0.06s

CREATE TABLE #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT LOCATION_NO, TILL_NO, TRAN_NO, TRAN_DATE,
				CASE WHEN TENDER_TYPE_DETAIL_CODE IS NULL THEN 'NULL_VALUE' ELSE TENDER_TYPE_DETAIL_CODE END AS TENDER_TYPE_DETAIL_CODE1,
				TENDER_NO, TENDER_SELLING, CHANGE_SELLING
		FROM ANALYTICS.FND_CUST_BASKET_TENDER
		GROUP BY 1,2,3,4,5,6,7,8)$[vLimit];
-- Execution time: 1m 12s

CREATE TABLE #wns_nm_DD_FND_CUSTOMER_CARD_TEMP DISTSTYLE ALL AS (
	SELECT CARD_NO,
			CASE WHEN PRODUCT_CODE_NO IN ('1','2','3','4','5','6','7','21' ) THEN 'SC'
					WHEN PRODUCT_CODE_NO ='20' THEN 'CC' END AS STORE_CC_FLAG
	FROM analytics.FND_CUSTOMER_CARD)$[vLimit];
-- Execution time: 59.26s

delete from #wns_nm_DD_FND_CUSTOMER_CARD_TEMP where STORE_CC_FLAG is null;
-- 8,924,491 rows affected
-- Execution time: 4.76s

CREATE TABLE #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT LOCATION_NO, TILL_NO, TRAN_NO, TRAN_DATE,
				TENDER_TYPE_DETAIL_CODE1 AS TENDER_TYPE_DETAIL_CODE,
				TENDER_NO, TENDER_SELLING, CHANGE_SELLING, STORE_CC_FLAG
		FROM #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP A
		LEFT JOIN #wns_nm_DD_FND_CUSTOMER_CARD_TEMP B
				ON A.TENDER_NO=B.CARD_NO)$[vLimit];
-- Execution time: 31.72s

CREATE TABLE #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG_BASE_TABLE
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.LOCATION_NO, A.TILL_NO, A.TRAN_NO, A.TRAN_DATE, A.TENDER_TYPE_DETAIL_CODE, A.TENDER_NO, A.TENDER_SELLING, A.CHANGE_SELLING, A.STORE_CC_FLAG,
				B.TENDER_TYPE_FOR_BASE_TABLE,
				CASE WHEN STORE_CC_FLAG IS NULL
						THEN
						CASE WHEN TENDER_TYPE_FOR_BASE_TABLE='WW VISA CARD' THEN 'CC'
							 WHEN TENDER_TYPE_FOR_BASE_TABLE='WW STORE CARD' THEN 'SC'
							 ELSE TENDER_TYPE_FOR_BASE_TABLE
						END
						ELSE STORE_CC_FLAG
					END AS TENDER_TYPE_FOR_BASE_TABLE1
		FROM #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG A
		LEFT JOIN (SELECT CASE WHEN TENDER_TYPE_DETAIL_CODE IS NULL THEN 'NULL_VALUE' ELSE TENDER_TYPE_DETAIL_CODE END AS TENDER_TYPE_DETAIL_CODE1,
							TENDER_TYPE_FOR_BASE_TABLE FROM DEVELOPMENT.SD_TENDER_TYPE_MAPPING_06APR) B
				ON A.TENDER_TYPE_DETAIL_CODE=B.TENDER_TYPE_DETAIL_CODE1)$[vLimit];
-- Execution time: 32.8s

CREATE TABLE #wns_nm_WNS_SD_TEMP1
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT TRAN_NO, LOCATION_NO, TILL_NO , TRAN_DATE,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1='SC' THEN TENDER_NO END) AS STORE_CARD_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='SC' THEN TENDER_SELLING END) AS STORE_CARD_TRAN_TENDER_SELLING,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='WW Gift Card' THEN TENDER_NO END) AS GIFT_CARD_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='WW Gift Card' THEN TENDER_SELLING END) AS GIFT_CARD_TRAN_TENDER_SELLING,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='WW Voucher' THEN TENDER_NO END) AS VOUCHER_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='WW Voucher' THEN TENDER_SELLING END) AS VOUCHER_TRAN_TENDER_SELLING,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Alien Bank Card' THEN TENDER_NO END) AS ALIEN_CARD_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Alien Bank Card' THEN TENDER_SELLING END) AS ALIEN_CARD_TRAN_TENDER_SELLING,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='CC' THEN TENDER_NO END) AS CREDIT_CARD_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='CC' THEN TENDER_SELLING END) AS CREDIT_CARD_TRAN_TENDER_SELLING,
				MAX(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Cash' THEN 1 ELSE 0 END) AS CASH_TENDER_IND,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Cash' THEN TENDER_SELLING-CHANGE_SELLING END) AS CASH_TRAN_TENDER_SELLING,
				COUNT(DISTINCT CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Other' THEN TENDER_NO END) AS OTHER_TENDER_COUNT,
				SUM(CASE WHEN TENDER_TYPE_FOR_BASE_TABLE1 ='Other' THEN TENDER_SELLING END) AS OTHER_TRAN_TENDER_SELLING
		FROM #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG_BASE_TABLE
		GROUP BY 1,2,3,4)$[vLimit];
-- Execution time: 2m 57s

CREATE TABLE #wns_nm_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*,FIN_YEAR_NO, FIN_HALF_NO, FIN_QUARTER_NO, FIN_MONTH_NO, FIN_WEEK_NO, FIN_DAY_NO, SEASON_NO
		        ,CASE WHEN DAY_NAME IN ('SATURDAY','SUNDAY') THEN 2   --added the weekday_weekend_code - new column
				 ELSE 1 END AS WEEKDAY_WEEKEND_CODE,
				C.GIFT_CARD_TENDER_COUNT, C.GIFT_CARD_TRAN_TENDER_SELLING, C.VOUCHER_TENDER_COUNT, C.VOUCHER_TRAN_TENDER_SELLING,
				C.ALIEN_CARD_TENDER_COUNT, C.ALIEN_CARD_TRAN_TENDER_SELLING, C.CASH_TENDER_IND, C.CASH_TRAN_TENDER_SELLING,
				C.STORE_CARD_TENDER_COUNT, C.STORE_CARD_TRAN_TENDER_SELLING, C.CREDIT_CARD_TENDER_COUNT, C.CREDIT_CARD_TRAN_TENDER_SELLING,
				C.OTHER_TENDER_COUNT, C.OTHER_TRAN_TENDER_SELLING
		FROM #wns_nm_DD_CA_TRAN_LEVEL_C2 A
		LEFT JOIN ANALYTICS.FND_CALENDAR B
				ON A.TRAN_DATE=B.CALENDAR_DATE
		LEFT JOIN #wns_nm_WNS_SD_TEMP1 C
				ON A.TRAN_DATE=C.TRAN_DATE
				AND A.LOCATION_NO=C.LOCATION_NO
				AND A.TILL_NO=C.TILL_NO
				AND A.TRAN_NO=C.TRAN_NO)$[vLimit];
-- Execution time: 1m 23s
-- 60GB
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_DD_CA_UCID_LEVEL_CUST_ACQ_mapping$[vDayName];
create table DEVELOPMENT.WNS_NM_DD_CA_UCID_LEVEL_CUST_ACQ_mapping$[vDayName]
diststyle all as
(select * from #wns_nm_DD_CA_UCID_LEVEL_CUST_ACQ) $[vLimit];

DROP TABLE IF EXISTS #wns_nm_DD_FND_CUST_BASKET_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_CUST_BASKET_UCID;
DROP TABLE IF EXISTS #wns_nm_DD_CUST_BASKET_UCID_TYPE_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_CUST_BASKET_UCID_TYPE;
DROP TABLE IF EXISTS #wns_nm_DD_FND_FV_VOUCHER_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_CA_TRAN_LEVEL_VOUCHER_FLAG;
DROP TABLE IF EXISTS #wns_nm_DD_CA_UCID_LEVEL_CUST_ACQ;
DROP TABLE IF EXISTS #wns_nm_DD_CA_TRAN_LEVEL_CUST_ACQ;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_CUSTOMER_CARD_MAPPING_SUB;
DROP TABLE IF EXISTS #wns_nm_DD_CA_TRAN_LEVEL_C2_1;
DROP TABLE IF EXISTS #wns_nm_DD_CA_TRAN_LEVEL_C2_2;
DROP TABLE IF EXISTS #wns_nm_DD_CA_TRAN_LEVEL_C2;
DROP TABLE IF EXISTS #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_FND_CUSTOMER_CARD_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG;
DROP TABLE IF EXISTS #wns_nm_DD_FND_CUST_BASKET_TENDER_TEMP_STORE_CC_FLAG_BASE_TABLE;
DROP TABLE IF EXISTS #wns_nm_WNS_SD_TEMP1;


/******************************************************************************************************************************************/
/* SCRIPT B - END                                                                                                         *****************/
/******************************************************************************************************************************************/

/******************************************************************
--TIER START
*******************************************************************/
---======================================================  START tier ====================================================
-- year ,half_year,fin_qy,fin_month_no based tier calculation and creating a single table
--  ''development.wns_adj_tier_wise$[vDayName]''

DROP TABLE IF EXISTS development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName];

CREATE TABLE development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName] AS
  SELECT * FROM (
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+01 AS FIN_MONTH, MONTH_01_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+02 AS FIN_MONTH, MONTH_02_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+03 AS FIN_MONTH, MONTH_03_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+04 AS FIN_MONTH, MONTH_04_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+05 AS FIN_MONTH, MONTH_05_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+06 AS FIN_MONTH, MONTH_06_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+07 AS FIN_MONTH, MONTH_07_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+08 AS FIN_MONTH, MONTH_08_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+09 AS FIN_MONTH, MONTH_09_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+10 AS FIN_MONTH, MONTH_10_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+11 AS FIN_MONTH, MONTH_11_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
                SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+12 AS FIN_MONTH, MONTH_12_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL) $[vLimit];


DROP TABLE if exists development.wns_kr_tier_year_wise_$[vDayName];

Create Table development.wns_kr_tier_year_wise_$[vDayName] diststyle all as
(select *
from (
      select cast(FIN_MONTH/100 as numeric(5,0)) as fin_year_no,nvl(tier,0) as tier_, b.perm_ucid_hashed as UCID
            ,ROW_NUMBER() OVER(PARTITION BY b.perm_ucid_hashed,fin_year_no ORDER BY tier_ DESC) AS MAX_TIER_RANK
      from development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName] a
      left join development.dim_customer_card_mapping b
      on a.customer_no = b.customer_no
      where mod(FIN_MONTH,100) = 12
      )
where MAX_TIER_RANK = 1
);


DROP TABLE IF EXISTS development.wns_adj_tier_fh_wise_UCID_$[vDayName];
Create Table development.wns_adj_tier_fh_wise_UCID_$[vDayName] as
select *
from (
      select cast(FIN_MONTH/100 as integer) as fin_year_no,nvl(tier,0) as tier_fh, b.perm_ucid_hashed as UCID
            ,case when mod(fin_month,100)/2 = 1 then 1
                  when mod(fin_month,100)/2 = 2 then 2
             else '0'
             end as half_year
            ,ROW_NUMBER() OVER(PARTITION BY b.perm_ucid_hashed,fin_year_no,half_year ORDER BY tier_fh DESC) AS MAX_TIER_RANK
                                                from development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName] a
      left join development.dim_customer_card_mapping b --change the mapping table accordingly
      on a.customer_no = b.customer_no
      where half_year in (1,2)
      )
where MAX_TIER_RANK = 1 and UCID is not null
;


Drop table IF Exists development.wns_adj_tier_fq_wise_UCID_$[vDayName];
Create Table development.wns_adj_tier_fq_wise_UCID_$[vDayName] as
select *
from (
      select cast(FIN_MONTH/100 as integer) as fin_year_no,nvl(tier,0) as tier_fq, b.perm_ucid_hashed as UCID
            ,case when mod(fin_month,100)/3 = 1 then 1
                  when mod(fin_month,100)/3 = 2 then 2
                  when mod(fin_month,100)/3 = 3 then 3
                  when mod(fin_month,100)/3 = 4 then 4
             else '0'
             end as quarter
            ,ROW_NUMBER() OVER(PARTITION BY b.perm_ucid_hashed,fin_year_no,quarter ORDER BY tier_fq DESC) AS MAX_TIER_RANK
                                                from development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName] a
      left join development.dim_customer_card_mapping b --change the mapping table accordingly
      on a.customer_no = b.customer_no
      where quarter in (1,2,3,4)
      )
where MAX_TIER_RANK = 1 and UCID is not null
;



Drop table IF Exists development.wns_adj_tier_fm_wise_UCID_$[vDayName];
Create Table development.wns_adj_tier_fm_wise_UCID_$[vDayName]
diststyle all as
select UCID,fin_year_no,fin_month_no,tier_fm
from (
      select cast(FIN_MONTH/100 as integer) as fin_year_no,nvl(tier,0) as tier_fm, b.perm_ucid_hashed as UCID
           ,mod(FIN_MONTH,100) as fin_month_no
            ,ROW_NUMBER() OVER(PARTITION BY b.perm_ucid_hashed,fin_year_no,fin_month_no ORDER BY tier_fm DESC) AS MAX_TIER_RANK
                                                from development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName] a
      left join development.dim_customer_card_mapping b --change the mapping table accordingly
      on a.customer_no = b.customer_no
        )
where MAX_TIER_RANK = 1 and UCID is not null ;



DROP TABLE IF EXISTS development.wns_adj_tier_wise$[vDayName];
CREATE TABLE IF NOT EXISTS development.wns_adj_tier_wise$[vDayName]
(
                ucid VARCHAR(100)   ENCODE lzo
                ,fin_year_no smallint   ENCODE az64
                ,fin_month_no smallint   ENCODE az64
                ,tier_fm smallint   ENCODE az64
                ,tier_fq smallint   ENCODE az64
                ,tier_fh smallint   ENCODE az64
                ,tier_fy smallint   ENCODE az64
)
DISTSTYLE ALL
;


grant select on table development.wns_adj_tier_wise$[vDayName] to public;


insert into development.wns_adj_tier_wise$[vDayName] (
select
   A.ucid,A.fin_year_no,A.fin_month_no,A.tier_fm
   ,  b.tier_fq,
   C.tier_fh,
   D.tier_ as tier_fy
from
   (
      select
         ucid,
         fin_year_no,
         fin_month_no,
         tier_fm,
         case
            when
               fin_month_no in
               (
                  '1',
                  '2',
                  '3'
               )
            then
               1
            when
               fin_month_no in
               (
                  '4', '5', '6'
               )
            then
               2
            when
               fin_month_no in
               (
                  '7', '8', '9'
               )
            then
               3
            when
               fin_month_no in
               (
                  '10', '11', '12'
               )
            then
               4
         end
         as fin_qy,
         case
            when
               fin_month_no in
               (
                  '1', '2', '3', '4', '5', '6'
               )
            then
               1
            when
               fin_month_no in
               (
                  '7', '8', '9', '10', '11', '12'
               )
            then
               2
         end
         as fin_hy
      from
         development.wns_adj_tier_fm_wise_UCID_$[vDayName]
   )
   A
   left join
      development.wns_adj_tier_fq_wise_UCID_$[vDayName] B
      on A.fin_year_no = B.fin_year_no
      and A.fin_qy = B.quarter
      and A.ucid = b.ucid
   LEFT JOIN
      development.wns_adj_tier_fh_wise_UCID_$[vDayName] C
      on A.fin_year_no = C.fin_year_no
      and A.fin_hy = C.half_year
      and A.ucid = C.ucid
   LEFT JOIN
      development.wns_kr_tier_year_wise_$[vDayName] D
      on A.fin_year_no = D.fin_year_no
      and A.ucid = D.ucid  where A.fin_year_no >='2018');


drop table if exists development.wns_nm_DD_SHK_TIER_LAST_TIER_RAW_$[vDayName];
drop table if exists development.wns_adj_tier_fm_wise_UCID_$[vDayName];
drop table if exists development.wns_adj_tier_fq_wise_UCID_$[vDayName];
drop table if exists development.wns_adj_tier_fh_wise_UCID_$[vDayName];
drop table if exists development.wns_kr_tier_year_wise_$[vDayName];

---=============================================================  END tier ====================================================


/******************************************************************************************************************************************/
/* SCRIPT C - Preparing Tier Details *******************************************************************************************************/
/******************************************************************************************************************************************/

-- EXTRACT RAW DATA FROM THE TIER TABLE AND PIVOT THE MONTHLY TIER COLUMNS IN TO A SINGLE COLUMN
CREATE TABLE #wns_nm_DD_SHK_TIER_LAST_TIER_RAW AS
  SELECT * FROM (
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+01 AS FIN_MONTH, MONTH_01_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+02 AS FIN_MONTH, MONTH_02_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+03 AS FIN_MONTH, MONTH_03_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+04 AS FIN_MONTH, MONTH_04_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+05 AS FIN_MONTH, MONTH_05_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+06 AS FIN_MONTH, MONTH_06_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+07 AS FIN_MONTH, MONTH_07_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+08 AS FIN_MONTH, MONTH_08_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+09 AS FIN_MONTH, MONTH_09_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+10 AS FIN_MONTH, MONTH_10_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+11 AS FIN_MONTH, MONTH_11_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL UNION
	SELECT PRIMARY_CUSTOMER_IDENTIFIER AS CUSTOMER_NO, (FIN_YEAR_NO*100)+12 AS FIN_MONTH, MONTH_12_TIER AS TIER FROM ANALYTICS.FND_WOD_TIER_MTH_DETAIL)$[vLimit];
-- Execution time: 20.28s

-- GENERATE PREVIOUS MONTH TIER AT A MONTH LEVEL FOR EVERY CUSTOMER
CREATE TABLE #wns_nm_DD_SHK_TIER_LAST_TIER_LAG AS (
	SELECT CUSTOMER_NO, FIN_MONTH, TIER,
		   LAG(TIER) OVER(PARTITION BY CUSTOMER_NO ORDER BY FIN_MONTH) AS PREV_MNTH_TIER
	FROM #wns_nm_DD_SHK_TIER_LAST_TIER_RAW)$[vLimit];
-- Execution time: 19.82s

--TAKE ALL CUSTOMERS CURRENT TIER ONLY
CREATE TABLE #wns_nm_DD_SHK_CUSTOMER_CURRENT_TIER AS (
	SELECT CUSTOMER_NO, CUSTOMER_CURRENT_TIER_CODE
	FROM (SELECT CUSTOMER_NO, FIN_MONTH, TIER AS CUSTOMER_CURRENT_TIER_CODE,
					ROW_NUMBER() OVER(PARTITION BY CUSTOMER_NO ORDER BY FIN_MONTH DESC) AS LATEST_TIER_RANK
			FROM #wns_nm_DD_SHK_TIER_LAST_TIER_LAG)
	WHERE LATEST_TIER_RANK = 1
	GROUP BY 1,2)$[vLimit];
-- Execution time: 19.82s

--TAKE ALL CUSTOMERS ALONG WITH THEIR PREVIOUS TIER AND THE MONTH IN WHICH THE TIER CHANGE OCCURRED
CREATE TABLE #wns_nm_DD_SHK_TIER_CHNG_MNTH AS (
	SELECT CUSTOMER_NO, FIN_MONTH AS LAST_TIER_CHANGE_MONTH, PREV_MNTH_TIER AS LAST_TIER, TIER AS CUSTOMER_CURRENT_TIER_CODE
	FROM (
		SELECT CUSTOMER_NO, FIN_MONTH, TIER, PREV_MNTH_TIER,
			   ROW_NUMBER() OVER(PARTITION BY CUSTOMER_NO ORDER BY FIN_MONTH DESC) AS LAST_CHNG_MNTH_RANK
		FROM #wns_nm_DD_SHK_TIER_LAST_TIER_LAG
		WHERE PREV_MNTH_TIER-TIER<>0)
	WHERE LAST_CHNG_MNTH_RANK=1
	GROUP BY 1,2,3,4)$[vLimit];
-- Execution time: 15.26s

--ADD LAST TIER AND TIER CHANGE MONTH INFORMATION TO THE TABLE WITH CURRENT TIER
CREATE TABLE #wns_nm_DD_SHK_CUSTOMER_TIER_DETAILS AS
	SELECT A.CUSTOMER_NO, A.CUSTOMER_CURRENT_TIER_CODE, LAST_TIER, LAST_TIER_CHANGE_MONTH
	FROM #wns_nm_DD_SHK_CUSTOMER_CURRENT_TIER A
	LEFT JOIN #wns_nm_DD_SHK_TIER_CHNG_MNTH B
	ON A.CUSTOMER_NO = B.CUSTOMER_NO$[vLimit];
-- Execution time: 7.58s

-- PREPARE LIST OF ALL UCIDS FROM TENDER TRIANGULATION OUTPUT DATA
CREATE TABLE #wns_nm_DD_CA_UCID_LIST AS (
	SELECT perm_ucid_hashed as UCID, CUSTOMER_NO
	FROM DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
	WHERE CUSTOMER_NO IS NOT NULL AND UCID_TYPE = 'KNOWN'
	GROUP BY 1,2 )$[vLimit];
-- Execution time: 4.43s

-- ATTACH THE ABOVE CREATED TIER INFORMATION TO THE UCID LIST OF ALL CUSTOMERS
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_SD_TIER_UCID_LEVEL_$[vDayName];
CREATE TABLE DEVELOPMENT.WNS_NM_WNS_SD_TIER_UCID_LEVEL_$[vDayName]
	DISTSTYLE ALL AS (
		SELECT UCID, LAST_TIER_CHANGE_MONTH, LAST_TIER, CUSTOMER_CURRENT_TIER_CODE
		FROM (
			SELECT CAST(A.UCID AS CHARACTER VARYING(30)), A.CUSTOMER_NO, B.LAST_TIER_CHANGE_MONTH, B.LAST_TIER, B.CUSTOMER_CURRENT_TIER_CODE,
				   ROW_NUMBER() OVER(PARTITION BY A.UCID ORDER BY B.CUSTOMER_CURRENT_TIER_CODE DESC, B.LAST_TIER_CHANGE_MONTH DESC, B.LAST_TIER DESC) AS TIER_RANK
			FROM #wns_nm_DD_CA_UCID_LIST A
			INNER JOIN #wns_nm_DD_SHK_CUSTOMER_TIER_DETAILS B
				ON A.CUSTOMER_NO=B.CUSTOMER_NO)
		WHERE TIER_RANK=1)$[vLimit];
-- Execution time: 13.89s



DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN_$[vDayName];
CREATE TABLE DEVELOPMENT.WNS_NM_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN_$[vDayName]
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT A.*,
				B.LOCATION_NAME, B.AREA_NO,	B.AREA_NAME, B.REGION_NO, B.REGION_NAME, B.CHAIN_NO,
				D.ST_S4S_SHAPE_OF_CHAIN_DESC AS SHAPE_OF_CHAIN_DESC,
				C.LAST_TIER_CHANGE_MONTH, C.LAST_TIER, C.CUSTOMER_CURRENT_TIER_CODE,H.tier_fy
				,H.tier_fq,H.tier_fh,H.tier_fm
		FROM #wns_nm_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN A
		LEFT JOIN DEVELOPMENT.WNS_NM_WNS_SD_TIER_UCID_LEVEL_$[vDayName] C
				ON A.UCID = C.UCID
		LEFT JOIN ANALYTICS.FND_LOCATION B
				ON A.LOCATION_NO = B.LOCATION_NO
		LEFT JOIN DEVELOPMENT.FND_ROG_SOC_LOCATION D
				ON A.LOCATION_NO = D.LOCATION_NO
	/*	LEFT JOIN #wns_kr_tier_year_wise E
				ON A.fin_year_no = E.fin_year_no
					and A.UCID = E.UCID
		LEFT JOIN #wns_adj_tier_fq_wise_UCID F
		        ON A.fin_year_no = F.fin_year_no
		        and A.fin_quarter_no = F.quarter
					and A.UCID = F.UCID
        LEFT JOIN #wns_adj_tier_fh_wise_UCID G
		        ON A.fin_year_no = G.fin_year_no
		        and A.fin_half_no = G.half_year
					and A.UCID = G.UCID*/
        LEFT JOIN (select * from development.wns_adj_tier_wise$[vDayName] where fin_year_no>=2021 and fin_month_no>=3) H
		        ON A.fin_year_no = H.fin_year_no
		        and A.fin_month_no = H.fin_month_no
					and A.UCID = H.UCID

	)$[vLimit];
-- Execution time: 1m 42s

DROP TABLE IF EXISTS #wns_nm_DD_SHK_TIER_LAST_TIER_RAW;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_TIER_LAST_TIER_LAG;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_CUSTOMER_CURRENT_TIER;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_TIER_CHNG_MNTH;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_CUSTOMER_TIER_DETAILS;
DROP TABLE IF EXISTS #wns_nm_DD_CA_UCID_LIST;
DROP TABLE IF EXISTS #wns_nm_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN;

/******************************************************************************************************************************************/
/* SCRIPT C - END                                                                                                         *****************/
/******************************************************************************************************************************************/






/******************************************************************************************************************************************/
/* SCRIPT D - Creating base table from $[vCBI] data with product & category details **********************************************/
/******************************************************************************************************************************************/

CREATE TABLE #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) AS (
		SELECT
		location_no
		,till_no
		,tran_no
		,tran_date
		,tran_time
		,item_seq_no
		,item_no
		,tran_type
		,item_tran_selling
		,case when vat_rate_perc is null then 0 else vat_rate_perc end as vat_rate_perc1
		,item_tran_qty
		,discount_selling
		,customer_no
		,waste_discount_selling
		,ROW_NUMBER() OVER(PARTITION BY TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO, ITEM_SEQ_NO, ITEM_NO ORDER BY LAST_UPDATED_DATE DESC) AS LATEST_FLAG
	    ,vitality_uda_value
		FROM ANALYTICS.FND_CUST_BASKET_ITEM
		WHERE last_updated_date = '$[vlast_updated_date]')$[vLimit];
-- Execution time: 15m 26s

--deleting redundant rows
DELETE FROM #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1 WHERE LATEST_FLAG>1;

--+++++++++++++++++++++++++++++++++++++++++Start of Addition Of Markdown_seq_no++++++++++++++++++++++++++++++----
-- TEMPORARY table for rtl_clearance for zone =1 filter and nxt_active_date logic
drop table if exists #wns_adj_rtl_lag_temp;
create table #wns_adj_rtl_lag_temp as
select * from (
                select item_no,markdown_seq_no,active_date,reset_date,ruling_rsp,
                lag(active_date-1) over (partition by item_no order by active_date desc) as nxt_active_date
                from analytics.fnd_rtl_clearance where zone_no=1
)$[vLimit];
-- joining both above table and making a decision of last next_active_date data which is null.
drop table if exists #wns_adj_cbi_rtl_join;
create table #wns_adj_cbi_rtl_join
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO,item_seq_no,item_no) as
select location_no,till_no,tran_no,tran_date,item_seq_no,A.item_no ,markdown_seq_no,active_date ,reset_date,ruling_rsp,
case when ruling_rsp>.01 then nvl(nxt_active_date ,reset_date-1) end as nxt_active_date
from (
      #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1 a
      left join
      #wns_adj_rtl_lag_temp b
      on a.item_no=b.item_no
      )$[vLimit];

drop table if exists #wns_adj_rtl_lag_temp;
-- Main logic of Markdown
drop table if exists #wns_adj_markdown_seq;
create table #wns_adj_markdown_seq
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO,item_seq_no,item_no) as
select location_no,till_no,tran_no,tran_date,item_seq_no,item_no  ,nvl(markdown_seq_no,0) as markdown_seq_no from (
                select location_no,till_no,tran_no,tran_date,item_seq_no,item_no  ,max(markdown_seq_no) as markdown_seq_no
                from(
                    select location_no,till_no,tran_no,tran_date,item_seq_no,item_no ,
                    case when reset_date <= nxt_active_date
                              and tran_date between active_date and reset_date-1
                              and ruling_rsp>0.01
                              then markdown_seq_no else
                    case when reset_date > nxt_active_date
                              and tran_date between active_date and nxt_active_date
                              and ruling_rsp>0.01
                              then markdown_seq_no  end
                    end as markdown_seq_no
                    from #wns_adj_cbi_rtl_join
                    )
                group by location_no,till_no,tran_no,tran_date,item_seq_no,item_no
                )$[vLimit];


drop table if exists #wns_adj_cbi_rtl_join;
--+++++++++++++++++++++++++++++++++++++++++End of Addition Of Markdown_seq_no++++++++++++++++++++++++++++++----

drop table if exists #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP;
create table #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) as
select A.*,B.tran_qty
from(
(select * from #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1) A
left join
(select * from(
select location_no,till_no,tran_no,tran_date,sum(item_tran_qty) as tran_qty from #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1
group by location_no,till_no,tran_no,tran_date
)
) B
ON A.TRAN_DATE = B.TRAN_DATE
AND A.LOCATION_NO = B.LOCATION_NO
AND A.TILL_NO = B.TILL_NO
AND A.TRAN_NO = B.TRAN_NO
)$[vLimit];

DROP TABLE IF EXISTS  #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP1;
DROP TABLE IF EXISTS #wns_nm_fnd_item;
--DROP TABLE IF EXISTS #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP;

-- Total script execution time: 0.02s
-- changed the code for phase2 promotion_no addition
CREATE TABLE #wns_nm_DD_SHK_CA_AUX_SUBSET
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO, ITEM_SEQ_NO,ITEM_NO) AS (
		SELECT LOCATION_NO, TRAN_DATE, TRAN_NO, TILL_NO, ITEM_NO, ITEM_SEQ_NO,
				1 AS PROMOTION_FLAG,
				TRAN_TYPE_CODE, sum(PROMOTION_DISCOUNT_AMOUNT) as PROMOTION_DISCOUNT_AMOUNT1
		FROM ANALYTICS.FND_CUST_BASKET_AUX
		WHERE last_updated_date = '$[vlast_updated_date]'
				AND PROMOTION_NO IS NOT NULL
				AND PROMOTION_NO <>''
				AND PROMOTION_DISCOUNT_AMOUNT > 0
				--AND TRAN_TYPE_CODE IN ('LOYALTY', 'WFS', 'RMS', 'ATG', 'ATGLOY', 'STAFF', 'EOL', 'FRANCHISE')
		GROUP BY 1,2,3,4,5,6,7,8)$[vLimit];

drop table if exists #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED1 ;
CREATE TABLE #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED1
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO, ITEM_SEQ_NO,ITEM_NO) AS (
		SELECT LOCATION_NO, TRAN_DATE, TRAN_NO, TILL_NO, ITEM_NO, ITEM_SEQ_NO,
				MAX(PROMOTION_FLAG) AS PROMOTION_FLAG,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'LOYALTY' THEN 1 ELSE 0 END) AS LOYALTY_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'LOYALTY' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS LOYALTY_DISCOUNT_SELLING,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'WFS' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS WFS_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'RMS' THEN 1 ELSE 0 END) AS RMS_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'RMS' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS RMS_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'ATG' THEN 1 ELSE 0 END) AS ATG_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'ATG' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS ATG_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'ATGLOY' THEN 1 ELSE 0 END) AS ATGLOY_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'ATGLOY' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS ATG_LOYALTY_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'STAFF' THEN 1 ELSE 0 END) AS STAFF_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'STAFF' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS STAFF_DISCOUNT_SELLING,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'CTV' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS VOUCHER_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'EOL' THEN 1 ELSE 0 END) AS EOL_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE = 'EOL' THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS EOL_DISCOUNT_SELLING,
				MAX(CASE WHEN TRAN_TYPE_CODE = 'FRANCHISE' THEN 1 ELSE 0 END) AS FRANCHISE_PROMO_FLAG,
				SUM(CASE WHEN TRAN_TYPE_CODE NOT IN ('ATG', 'LOYALTY', 'ATGLOY', 'STAFF', 'WFS', 'EOL', 'RMS') THEN PROMOTION_DISCOUNT_AMOUNT1 ELSE 0 END) AS OTHER_DISCOUNT_SELLING,
				CASE WHEN (STAFF_DISCOUNT_SELLING = 0 AND ATG_DISCOUNT_SELLING + ATG_LOYALTY_DISCOUNT_SELLING + RMS_DISCOUNT_SELLING + LOYALTY_DISCOUNT_SELLING + EOL_DISCOUNT_SELLING + WFS_DISCOUNT_SELLING + OTHER_DISCOUNT_SELLING = 0) THEN 0
					 WHEN (STAFF_DISCOUNT_SELLING > 0 AND ATG_DISCOUNT_SELLING + ATG_LOYALTY_DISCOUNT_SELLING + RMS_DISCOUNT_SELLING + LOYALTY_DISCOUNT_SELLING + EOL_DISCOUNT_SELLING + WFS_DISCOUNT_SELLING + OTHER_DISCOUNT_SELLING > 0) THEN 1
					 WHEN (STAFF_DISCOUNT_SELLING > 0 AND ATG_DISCOUNT_SELLING + ATG_LOYALTY_DISCOUNT_SELLING + RMS_DISCOUNT_SELLING + LOYALTY_DISCOUNT_SELLING + EOL_DISCOUNT_SELLING + WFS_DISCOUNT_SELLING + OTHER_DISCOUNT_SELLING = 0) THEN 2
					 WHEN (STAFF_DISCOUNT_SELLING = 0 AND ATG_DISCOUNT_SELLING + ATG_LOYALTY_DISCOUNT_SELLING + RMS_DISCOUNT_SELLING + LOYALTY_DISCOUNT_SELLING + EOL_DISCOUNT_SELLING + WFS_DISCOUNT_SELLING + OTHER_DISCOUNT_SELLING > 0) THEN 3 END AS DISCOUNT_CODE
		FROM #wns_nm_DD_SHK_CA_AUX_SUBSET
		GROUP BY 1,2,3,4,5,6)$[vLimit];
-- Execution time: 2m 54s


drop table if exists #WNS_ADJ_PROMOTION_NO ;
create table #WNS_ADJ_PROMOTION_NO
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO,ITEM_SEQ_NO,ITEM_NO) AS (
select location_no,till_no,tran_no,tran_date,item_no,item_seq_no,
		max(case when tran_type_code='RMS'  then promotion_no else
				case when tran_type_code='LOYALTY'
				-- check if any loyalty promotion_no is without prefixes also
				 then trim(SUBSTRING(promotion_no ,4,len(promotion_no)))  else
						case when tran_type_code='WFS' 	and trim(SUBSTRING(promotion_no ,0,4)) in ('WFS','888')
							then trim(SUBSTRING(promotion_no ,4,len(promotion_no)))  else
						case when tran_type_code='FRANCHISE'  then promotion_no
						end
					end
				end end) as RMS_PROMOTION_NO,
		max(case when tran_type_code='ATG '
					and trim(SUBSTRING(promotion_no ,0,6))='promo' then trim(SUBSTRING(promotion_no ,6,len(promotion_no)))
				when tran_type_code='ATG '
					and trim(SUBSTRING(promotion_no ,0,8))='bppromo' then trim(SUBSTRING(promotion_no ,8,len(promotion_no)))
				when tran_type_code='ATG '
					and trim(SUBSTRING(promotion_no ,0,3))='cq' then trim(SUBSTRING(promotion_no ,3,len(promotion_no)))
				when tran_type_code='ATG '
					and trim(SUBSTRING(promotion_no ,0,3))='sp' then trim(SUBSTRING(promotion_no ,3,len(promotion_no)	))
				when tran_type_code='ATG '
					and trim(SUBSTRING(promotion_no ,0,3))='bp' then trim(SUBSTRING(promotion_no ,3,len(promotion_no)))
				when tran_type_code='ATG '  then promotion_no
				end) as ATG_PROMOTION_NO ,
	 -- ATGLOY does not have any promotion_no with out "promo' prefix.
		max(case when tran_type_code='ATGLOY '
					and trim(SUBSTRING(promotion_no ,0,6))='promo' then trim(SUBSTRING(promotion_no ,6,len(promotion_no))) else
					case when tran_type_code='WFS '
					and trim(SUBSTRING(promotion_no ,0,6))='promo' then trim(SUBSTRING(promotion_no ,6,len(promotion_no))) end
					end) as ATG_LOYALTY_PROMOTION_NO  ,
		max(case when tran_type_code='EOL '  then promotion_no
		end) as EOL_PROMOTION_NO
from (select * from
		(select location_no,till_no,tran_no,tran_date,item_no,item_seq_no,tran_type_code,aux_seq_no,promotion_no,
          -- adding windowing function for find ing the min and then giving the flag for it.
          row_number() over (partition by location_no,till_no,tran_no,tran_date,item_no,item_seq_no,tran_type_code order by aux_seq_no asc) as aux_seq_no_rank
			from  ANALYTICS.FND_CUST_BASKET_AUX
      -- where location_no='1047' and till_no='11' and tran_no='43' and tran_date='2018-04-16'
			WHERE last_updated_date = '$[vlast_updated_date]'
				AND PROMOTION_NO IS NOT NULL
				AND PROMOTION_NO <>''
				AND PROMOTION_DISCOUNT_AMOUNT > 0
				AND TRAN_TYPE_CODE IN ('LOYALTY', 'WFS', 'RMS', 'ATG', 'ATGLOY', 'STAFF', 'EOL', 'FRANCHISE'))
       where  aux_seq_no_rank=1
	   )
group by location_no,till_no,tran_no,tran_date,item_no,item_seq_no)$[vLimit];

drop table if exists #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED;
create table #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO,ITEM_SEQ_NO,ITEM_NO) as
	select A.*,RMS_PROMOTION_NO,ATG_PROMOTION_NO,ATG_LOYALTY_PROMOTION_NO,EOL_PROMOTION_NO from (
	#wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED1 A
	left join
	#WNS_ADJ_PROMOTION_NO B
	ON A.TRAN_DATE=B.TRAN_DATE
	AND A.LOCATION_NO=B.LOCATION_NO
	AND A.TILL_NO=B.TILL_NO
	AND A.TRAN_NO=B.TRAN_NO
	AND A.item_seq_no=B.item_seq_no
	AND A.item_no=B.item_no)$[vLimit];


DROP TABLE IF EXISTS #wns_nm_DD_SHK_CA_AUX_SUBSET;

DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_DD_SHK_CA_TRAN_ITEM_LEVEL_CAL_JOIN_BU_$[vDayName];
CREATE TABLE DEVELOPMENT.WNS_NM_WNS_DD_SHK_CA_TRAN_ITEM_LEVEL_CAL_JOIN_BU_$[vDayName]
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO, ITEM_SEQ_NO,ITEM_NO) AS (
		SELECT A.*, LOYALTY_PROMO_FLAG, LOYALTY_DISCOUNT_SELLING, WFS_DISCOUNT_SELLING, RMS_PROMO_FLAG, RMS_DISCOUNT_SELLING, ATG_PROMO_FLAG,
				ATG_DISCOUNT_SELLING, ATGLOY_PROMO_FLAG, ATG_LOYALTY_DISCOUNT_SELLING, STAFF_PROMO_FLAG, STAFF_DISCOUNT_SELLING,VOUCHER_DISCOUNT_SELLING, EOL_PROMO_FLAG,
				EOL_DISCOUNT_SELLING, FRANCHISE_PROMO_FLAG, OTHER_DISCOUNT_SELLING,
				CASE WHEN PROMOTION_FLAG = 1 THEN 1 ELSE 0 END AS PROMO_FLAG,
				B.DISCOUNT_CODE,RMS_PROMOTION_NO,ATG_PROMOTION_NO,ATG_LOYALTY_PROMOTION_NO,EOL_PROMOTION_NO,markdown_seq_no
		FROM #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP A
		LEFT JOIN #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED B
		ON A.TRAN_DATE = B.TRAN_DATE
			AND A.LOCATION_NO = B.LOCATION_NO
			AND A.TILL_NO = B.TILL_NO
			AND A.TRAN_NO = B.TRAN_NO
			AND  A.ITEM_SEQ_NO = B.ITEM_SEQ_NO
			AND  A.ITEM_NO = B.ITEM_NO
		LEFT JOIN #wns_adj_markdown_seq C
		ON A.TRAN_DATE = C.TRAN_DATE
			AND A.LOCATION_NO = C.LOCATION_NO
			AND A.TILL_NO = C.TILL_NO
			AND A.TRAN_NO = C.TRAN_NO
			AND A.ITEM_SEQ_NO = C.ITEM_SEQ_NO
			AND A.ITEM_NO = C.ITEM_NO)$[vLimit];
-- Execution time: 19m 22s

DROP TABLE IF EXISTS #wns_nm_DD_SHK_CUST_BASKET_ITEM_SUBSET_TEMP;
DROP TABLE IF EXISTS #wns_nm_DD_SHK_CA_AUX_SUBSET_UNPIVOTTED;

/******************************************************************************************************************************************/
/* SCRIPT D - END                                                                                                         *****************/
/******************************************************************************************************************************************/

/******************************************************************************************************************************************/
/* SCRIPT 0 - Removing previous week's Base Table *****************************************************************************************/
/******************************************************************************************************************************************/

-- Moving previous week's Base Table to S3 Development External
-- unload ('select * from development.wns_cust_basket_item') --this part will change for the next wednesday
-- to 's3://woolworths-its-automation/marketing-automation/data/ttci/development/cust_basket_item_{3}'
-- iam_role 'arn:aws:iam::102116558525:role/etl_sulaco'
-- allowoverwrite
-- parallel on
-- partition by(tran_date)
-- parquet;

/******************************************************************************************************************************************/
/* SCRIPT 0 - END                                                                                                         *****************/
/******************************************************************************************************************************************/



/******************************************************************************************************************************************/
/* SCRIPT E - Final inner join of CUST_BASKET & $[vCBI] **************************************************************************/
/******************************************************************************************************************************************/

CREATE TABLE #WNS_CUST_BASKET_ITEM_TEMP
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO, ITEM_SEQ_NO,ITEM_NO) AS
	 (
		SELECT a.location_no, a.till_no, a.tran_no, a.tran_date,
				a.fin_year_no, a.fin_half_no, a.fin_quarter_no, a.fin_month_no, a.fin_week_no, a.fin_day_no,a.season_no,a.weekday_weekend_code,
				a.location_name, a.area_no, a.area_name, a.region_no, a.region_name, a.shape_of_chain_desc as alternate_location_hierarchy1,
				-1 as alternate_location_hierarchy2, -1 as alternate_location_hierarchy3 , -1 as alternate_location_hierarchy4,
				-1 as alternate_location_hierarchy5 , -1 as alternate_location_hierarchy6,
				a.tran_time,
				a.tran_type, a.tran_ind,
				a.tran_selling,
				a.tran_selling/(1+(vat_rate_perc1/100)) as tran_selling_vat_excl,--p2
				a.discount_selling,
				a.discount_selling/(1+(vat_rate_perc1/100)) as DISCOUNT_SELLING_VAT_EXCL,--p2
				a.store_card_tender_count, a.store_card_tran_tender_selling,
				a.credit_card_tender_count, a.credit_card_tran_tender_selling,
				a.gift_card_tender_count, a.gift_card_tran_tender_selling,
				a.voucher_tender_count, a.voucher_tran_tender_selling,
				a.alien_card_tender_count, a.alien_card_tran_tender_selling,
				a.cash_tender_ind, a.cash_tran_tender_selling,
				a.other_tender_count, a.other_tran_tender_selling,
				a.wrewards_swipe_ind, a.myschool_swipe_ind,a.VMP_IND,
				a.ucid,
				/*case when a.ucid_type in ('KNOWN') AND a.customer_current_tier_code IN (3,4) THEN 'WREWARDS Known VIP'
					when a.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					WHEN a.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					WHEN a.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
					else 'CASH'
					END AS CUSTOMER_COHORT,*/
				case when a.ucid_type in ('KNOWN') AND a.tier_fy IN (3,4) THEN 'WREWARDS Known VIP'
					  when a.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN a.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN a.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FY,
				case when a.ucid_type in ('KNOWN') AND a.tier_fh IN (3,4) THEN 'WREWARDS Known VIP'
					  when a.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN a.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN a.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FH,
				case when a.ucid_type in ('KNOWN') AND a.tier_fq IN (3,4) THEN 'WREWARDS Known VIP'
					  when a.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN a.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN a.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FQ,
				case when a.ucid_type in ('KNOWN') AND a.tier_fm IN (3,4) THEN 'WREWARDS Known VIP'
					  when a.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN a.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN a.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FM,
				a.acquisition_date,
				-1 as foods_life_cycle_code, -1 as fbh_life_cycle_code, -1 as ww_life_cycle_code,
		---1 as LAST_UPDATED_DATE,
				a.age,
				case when a.AGE between 18 and 24 then '18-24'
					 when a.AGE between 25 and 34 then '25-34'
					 when a.AGE between 35 and 44 then '35-44'
					 when a.AGE between 45 and 54 then '45-54'
					 when a.AGE>55 then '55+' else 'No Value' end as AGE_BAND,
				a.race as derived_race, a.gender,
				-1 as HOUSEHOLD_INCOME_BAND_FY,
				-1 as MACRO_SEGMENT_FY ,
				-1 as MICRO_SEGMENT_FY ,
				-1 as EMPLOYEE_STATUS_CODE,-- @adj sep
				b.item_seq_no, b.item_no,
				b.tran_type as item_tran_type,
				b.item_tran_selling,
				b.discount_selling as item_discount_selling,
				b.waste_discount_selling as WASTE_DISCOUNT_PERC,
				b.item_tran_selling/(1+(vat_rate_perc1/100)) as ITEM_TRAN_SELLING_VAT_EXCL,--p2
				b.discount_selling/(1+(vat_rate_perc1/100)) as ITEM_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.vat_rate_perc1 as vat_rate_perc,
				b.vitality_uda_value as VITALITY_UDA_VALUE_NO,
				b.tran_qty,
				b.item_tran_qty,
				b.discount_code,
				b.RMS_PROMOTION_NO,b.ATG_PROMOTION_NO,b.ATG_LOYALTY_PROMOTION_NO,b.EOL_PROMOTION_NO,
				b.loyalty_discount_selling,
				b.rms_discount_selling,
				b.atg_discount_selling,
				b.atg_loyalty_discount_selling,
				b.staff_discount_selling,b.VOUCHER_DISCOUNT_SELLING,
				b.eol_discount_selling,
				b.wfs_discount_selling,
				b.other_discount_selling,
				b.loyalty_discount_selling/(1+(vat_rate_perc1/100)) as LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.rms_discount_selling/(1+(vat_rate_perc1/100)) as RMS_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.atg_discount_selling/(1+(vat_rate_perc1/100)) as ATG_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.atg_loyalty_discount_selling/(1+(vat_rate_perc1/100)) as ATG_LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.VOUCHER_DISCOUNT_SELLING/(1+(vat_rate_perc1/100)) as VOUCHER_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.staff_discount_selling/(1+(vat_rate_perc1/100)) as STAFF_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.eol_discount_selling/(1+(vat_rate_perc1/100)) as EOL_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.wfs_discount_selling/(1+(vat_rate_perc1/100)) as WFS_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.other_discount_selling/(1+(vat_rate_perc1/100)) as OTHER_DISCOUNT_SELLING_VAT_EXCL,--p2
				b.MARKDOWN_SEQ_NO
					FROM DEVELOPMENT.WNS_NM_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN_$[vDayName] a
		INNER JOIN DEVELOPMENT.WNS_NM_WNS_DD_SHK_CA_TRAN_ITEM_LEVEL_CAL_JOIN_BU_$[vDayName] b
				ON A.TRAN_DATE = B.TRAN_DATE
					AND A.LOCATION_NO = B.LOCATION_NO
					AND A.TILL_NO = B.TILL_NO
					AND A.TRAN_NO = B.TRAN_NO
		WHERE a.chain_no<>30
				AND a.tran_type in ('S','V','R','Q'))$[vLimit];

DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_DD_SHK_CA_TRAN_ITEM_LEVEL_CAL_JOIN_BU_$[vDayName];
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_DD_CA_TRAN_LEVEL_CAL_JOIN_$[vDayName];


DROP TABLE IF EXISTS #wns_kr_Tran_discount_selling_vat_exc;
Create Table #wns_kr_Tran_discount_selling_vat_exc
	DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) as
select location_no,till_no,tran_no,tran_date , sum(ITEM_TRAN_SELLING_VAT_EXCL) as TRAN_SELLING_VAT_EXCL,
		sum(ITEM_DISCOUNT_SELLING_VAT_EXCL) as DISCOUNT_SELLING_VAT_EXCL
from #WNS_CUST_BASKET_ITEM_TEMP
group by 1,2,3,4
$[vLimit];



DROP TABLE IF EXISTS #wns_nm_fnd_item ;
create table #wns_nm_fnd_item diststyle all as (
	select item_no, B.BUSINESS_UNIT_LONG_DESC,B.BUSINESS_UNIT_NO,B.GROUP_NO,B.SUBGROUP_NO,B.DEPARTMENT_NO
			,B.CLASS_NO,B.SUBCLASS_NO,B.BUSINESS_UNIT_NAME,B.GROUP_NAME,B.SUBGROUP_NAME,B.DEPARTMENT_NAME,B.CLASS_NAME
			,B.SUBCLASS_NAME,B.ITEM_LEVEL1_NO,upper(b.ITEM_SHORT_DESC) AS ITEM_SHORT_DESC
			,B.GROUP_LONG_DESC,B.SUBGROUP_LONG_DESC,B.DEPARTMENT_LONG_DESC
	from ANALYTICS.FND_ITEM b
	group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)$[vLimit];

DROP TABLE IF EXISTS #wns_kr_uda_info ;
Create Table #wns_kr_uda_info
	diststyle all as
(
	select item_no,
		 UDA_104_VALUE_DESC
		,UDA_104_VALUE_NO
		,UDA_300_VALUE_DESC
		,UDA_300_VALUE_NO
		,UDA_306_VALUE_DESC
		,UDA_306_VALUE_NO
		,UDA_310_VALUE_DESC
		,UDA_310_VALUE_NO
		,UDA_316_VALUE_DESC
		,UDA_316_VALUE_NO
		,UDA_320_VALUE_DESC
		,UDA_320_VALUE_NO
		,UDA_327_7703_7707_7708_VALUE_DESC
		,UDA_327_7703_7707_7708_VALUE_NO
		,UDA_2301_VALUE_DESC
		,UDA_2301_VALUE_NO
		,UDA_7702_VALUE_DESC
		,UDA_7702_VALUE_NO
		,UDA_7704_VALUE_DESC
		,UDA_7704_VALUE_NO
	from development.wns_hs_uda_value_and_desc
)
$[vLimit];

DROP TABLE IF EXISTS DEVELOPMENT.CUST_BASKET_ITEM_$[vDayName];
CREATE TABLE DEVELOPMENT.CUST_BASKET_ITEM_$[vDayName](
TRAN_DATE	date	encode zstd	,
LOCATION_NO	smallint	encode zstd	,
TILL_NO	smallint	encode zstd	,
TRAN_NO	integer	encode zstd	,
TRAN_TIME	varchar(8)		,
TRAN_IND	smallint		,
TRAN_TYPE	varchar(4)		,
TRAN_QTY	integer		,
TRAN_SELLING	numeric(14,2)	encode zstd	,
TRAN_SELLING_VAT_EXCL	numeric(14,2)	encode zstd	,
DISCOUNT_SELLING	numeric(14,2)	encode zstd	,
DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)	encode zstd	,
FIN_YEAR_NO	smallint		,
FIN_HALF_NO	smallint		,
FIN_QUARTER_NO	smallint,
FIN_MONTH_NO	smallint		,
FIN_WEEK_NO	smallint		,
FIN_DAY_NO	smallint		,
SEASON_NO	smallint		,
WEEKDAY_WEEKEND_CODE	smallint		,
TIME_OF_DAY_CODE	smallint		,
ITEM_SEQ_NO	smallint	encode zstd	,
ITEM_NO	numeric(18)	encode zstd	,
ITEM_LEVEL1_NO	bigint	encode zstd	,
ITEM_SHORT_DESC	varchar(60)	encode zstd	,
ITEM_TRAN_TYPE	varchar(4)		,
ITEM_TRAN_QTY	integer		,
ITEM_TRAN_SELLING	numeric(14,2)	encode zstd	,
ITEM_TRAN_SELLING_VAT_EXCL	numeric(14,2)	encode zstd	,
ITEM_DISCOUNT_SELLING	numeric(14,2)		,
ITEM_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
WASTE_DISCOUNT_PERC	numeric(14,2)		,
VAT_RATE_PERC	numeric(4,2)		,
COLOUR_FAMILY	varchar(50)		,
BUSINESS_UNIT_NO	smallint		,
BUSINESS_UNIT_NAME	varchar(40)		,
GROUP_NO	smallint		,
GROUP_NAME	varchar(40)	encode zstd	,
SUBGROUP_NO	smallint		,
SUBGROUP_NAME	varchar(40)	encode zstd	,
DEPARTMENT_NO	smallint		,
DEPARTMENT_NAME	varchar(40)	encode zstd	,
CLASS_NO	smallint	encode zstd	,
CLASS_NAME	varchar(40)	encode zstd	,
SUBCLASS_NO	smallint	encode zstd	,
SUBCLASS_NAME	varchar(40)	encode zstd	,
ALTERNATE_PRODUCT_HIERARCHY1	varchar(15)		,
ALTERNATE_PRODUCT_HIERARCHY2	varchar(9)		,
ALTERNATE_PRODUCT_HIERARCHY3	varchar(31)	encode zstd	,
ALTERNATE_PRODUCT_HIERARCHY4	varchar(35)		,
ALTERNATE_PRODUCT_HIERARCHY5	varchar(6)		,
ALTERNATE_PRODUCT_HIERARCHY6	varchar(36)		,
SALES_CHANNEL_CODE	smallint		,
AREA_NO	smallint		,
AREA_NAME	varchar(40)		,
REGION_NO	smallint		,
REGION_NAME	varchar(40)		,
LOCATION_NAME	varchar(40)		,
ALTERNATE_LOCATION_HIERARCHY1	varchar(40)		,
ALTERNATE_LOCATION_HIERARCHY2	smallint		,
ALTERNATE_LOCATION_HIERARCHY3	smallint		,
ALTERNATE_LOCATION_HIERARCHY4	smallint		,
ALTERNATE_LOCATION_HIERARCHY5	smallint		,
ALTERNATE_LOCATION_HIERARCHY6	smallint		,
DISCOUNT_CODE	smallint		,
RMS_PROMOTION_NO	varchar(25)		,
ATG_PROMOTION_NO	varchar(25)		,
ATG_LOYALTY_PROMOTION_NO	varchar(25)		,
EOL_PROMOTION_NO	varchar(25)		,
RMS_DISCOUNT_SELLING	numeric(14,2)		,
RMS_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
LOYALTY_DISCOUNT_SELLING	numeric(14,2)		,
LOYALTY_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
ATG_DISCOUNT_SELLING	numeric(14,2)		,
ATG_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
ATG_LOYALTY_DISCOUNT_SELLING	numeric(14,2)		,
ATG_LOYALTY_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
EOL_DISCOUNT_SELLING	numeric(14,2)		,
EOL_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
WFS_DISCOUNT_SELLING	numeric(14,2)		,
WFS_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
STAFF_DISCOUNT_SELLING	numeric(14,2)		,
STAFF_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
VOUCHER_DISCOUNT_SELLING	numeric(14,2)		,
VOUCHER_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
OTHER_DISCOUNT_SELLING	numeric(14,2)		,
OTHER_DISCOUNT_SELLING_VAT_EXCL	numeric(14,2)		,
MARKDOWN_SEQ_NO	smallint		,
STORE_CARD_TENDER_COUNT	smallint		,
STORE_CARD_TRAN_TENDER_SELLING	numeric(14,2)		,
CREDIT_CARD_TENDER_COUNT	smallint		,
CREDIT_CARD_TRAN_TENDER_SELLING	numeric(14,2)		,
GIFT_CARD_TENDER_COUNT	smallint		,
GIFT_CARD_TRAN_TENDER_SELLING	numeric(14,2)		,
ALIEN_CARD_TENDER_COUNT	smallint		,
ALIEN_CARD_TRAN_TENDER_SELLING	numeric(14,2)	encode zstd	,
CASH_TENDER_IND	integer		,
CASH_TRAN_TENDER_SELLING	numeric(14,2)		,
OTHER_TENDER_COUNT	smallint		,
OTHER_TRAN_TENDER_SELLING	numeric(14,2)		,
--VOUCHER_NO	integer	,
VOUCHER_TENDER_COUNT	smallint		,
VOUCHER_TRAN_TENDER_SELLING	numeric(14,2)		,
UCID	varchar(100)	encode zstd	,
CUSTOMER_COHORT_FY	varchar(19)		,
CUSTOMER_COHORT_FH	varchar(19)		,
CUSTOMER_COHORT_FQ	varchar(19)		,
CUSTOMER_COHORT_FM	varchar(19)		,
CUSTOMER_COHORT_FW	varchar(19)		,
AGE	smallint		,
AGE_BAND_FY	varchar(8)		,
AGE_BAND_FH	varchar(8)		,
AGE_BAND_FQ	varchar(8)		,
AGE_BAND_FM	varchar(8)		,
AGE_BAND_FW	varchar(8)		,
GENDER	varchar(8)		,
DERIVED_RACE	varchar(30)		,
ACQUISITION_DATE	date	encode zstd	,
HOUSEHOLD_INCOME_BAND_FY	smallint		,
MACRO_SEGMENT_FY 	smallint		,
MICRO_SEGMENT_FY 	smallint		,
EMPLOYEE_STATUS_CODE	smallint		,
STORE_CARD_COUNT	smallint		,
WREWARDS_CARD_COUNT	smallint		,
MYSCHOOL_CARD_COUNT	smallint		,
CREDIT_CARD_COUNT	smallint		,
LITTLEWORLD_MEMBERSHIP_COUNT	smallint		,
VITALITY_MEMBERSHIP_COUNT	smallint		,
NON_REWARDS_CARD_COUNT	smallint		,
UDA_104_VALUE_NO	varchar(100)		,
UDA_104_VALUE_DESC	varchar(100)		,
UDA_300_VALUE_NO	varchar(100)		,
UDA_300_VALUE_DESC	varchar(100)		,
UDA_306_VALUE_NO	varchar(100)		,
UDA_306_VALUE_DESC	varchar(100)		,
UDA_310_VALUE_NO	varchar(100)		,
UDA_310_VALUE_DESC	varchar(100)		,
UDA_316_VALUE_NO	varchar(100)		,
UDA_316_VALUE_DESC	varchar(100)		,
UDA_320_VALUE_NO	varchar(100)		,
UDA_320_VALUE_DESC	varchar(100)		,
UDA_327_7703_7707_7708_VALUE_NO	varchar(100)		,
UDA_327_7703_7707_7708_VALUE_DESC	varchar(100)		,
UDA_2301_VALUE_NO	varchar(100)		,
UDA_2301_VALUE_DESC	varchar(100)		,
UDA_7702_VALUE_NO	varchar(100)		,
UDA_7702_VALUE_DESC	varchar(100)		,
UDA_7704_VALUE_NO	varchar(100)		,
UDA_7704_VALUE_DESC	varchar(100)		,
VITALITY_UDA_VALUE_NO	smallint		,
WREWARDS_SWIPE_IND	boolean		,
MYSCHOOL_SWIPE_IND	boolean		,
VMP_IND			smallint,
BASKET_ID	varchar(118)		,
LAST_UPDATED_DATE	date

)
DISTSTYLE KEY
DISTKEY (tran_date)
SORTKEY (tran_date, location_no, till_no, tran_no, item_seq_no, item_no)  ;
-- end of schema
INSERT INTO DEVELOPMENT.CUST_BASKET_ITEM_$[vDayName]
 (
		SELECT a.tran_date, a.location_no, a.till_no, a.tran_no,
				a.tran_time,a.tran_ind,a.tran_type,nvl(a.tran_qty,0) as TRAN_QTY,
				nvl(a.tran_selling,0) as tran_selling ,nvl(e.tran_selling_vat_excl,0) as tran_selling_vat_excl ,--p2
				nvl(a.discount_selling,0) as discount_selling,nvl(e.DISCOUNT_SELLING_VAT_EXCL,0) as DISCOUNT_SELLING_VAT_EXCL,--p2
				a.fin_year_no, a.fin_half_no, a.fin_quarter_no, a.fin_month_no,
				a.fin_week_no, a.fin_day_no,a.season_no,a.weekday_weekend_code,
				case when TRAN_TIME between '07:00:00' and '08:59:59' then 1
					 when TRAN_TIME between '09:00:00' and '11:59:59' then 2
					 when TRAN_TIME between '12:00:00' and '14:59:59' then 3
					 when TRAN_TIME between '15:00:00' and '17:59:59' then 4
					 when TRAN_TIME between '18:00:00' and '20:59:59' then 5
					 when TRAN_TIME between '21:00:00' and '23:59:59' then 6
					 when TRAN_TIME between '00:00:00' and '06:59:59' then 6
					else -1 --[KR]:else condition as 'No Value'
				end as TIME_OF_DAY_CODE,a.item_seq_no,
				nvl(a.item_no,0) as item_no, nvl(b.item_level1_no,0) as item_level1_no,
				nvl(b.ITEM_SHORT_DESC,'NO VALUE') as ITEM_SHORT_DESC,
				a.item_tran_type,nvl(a.item_tran_qty,0) as item_tran_qty,
				nvl(a.item_tran_selling,0) as item_tran_selling,nvl(a.ITEM_TRAN_SELLING_VAT_EXCL,0) as ITEM_TRAN_SELLING_VAT_EXCL,--p2
				nvl(a.item_discount_selling,0) as item_discount_selling, nvl(a.ITEM_DISCOUNT_SELLING_VAT_EXCL,0) as ITEM_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.WASTE_DISCOUNT_PERC,0) as WASTE_DISCOUNT_PERC,nvl(a.vat_rate_perc,0) as vat_rate_perc,
				nvl(c.DIFF_RANGE_DESC,'NO VALUE') as colour_family ,nvl(B.BUSINESS_UNIT_NO,0) as BUSINESS_UNIT_NO,
				nvl(B.BUSINESS_UNIT_NAME,'NO VALUE') as BUSINESS_UNIT_NAME ,nvl(B.GROUP_NO,0) as GROUP_NO,
				nvl(B.GROUP_NAME,'NO VALUE') as GROUP_NAME,nvl(B.SUBGROUP_NO,0) as SUBGROUP_NO,nvl(B.SUBGROUP_NAME,'NO VALUE') as SUBGROUP_NAME, nvl(B.DEPARTMENT_NO,0) as DEPARTMENT_NO,nvl(B.DEPARTMENT_NAME,'NO VALUE') as DEPARTMENT_NAME,nvl(B.CLASS_NO,0) as CLASS_NO,nvl(B.CLASS_NAME,'NO VALUE') as CLASS_NAME,nvl(B.SUBCLASS_NO,0) as SUBCLASS_NO,nvl(B.SUBCLASS_NAME,'NO VALUE') as SUBCLASS_NAME,
				case when BUSINESS_UNIT_NO=50 then 'Food'
					 when BUSINESS_UNIT_NO in (51,52,53,54,55) then 'FBH'
					 when BUSINESS_UNIT_NO=70 then 'Non-Merchandise'
				else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY1 ,
				case when GROUP_NO in (9000,9001,9002,9010,9041) then 'Long-Life'
					 when GROUP_NO in (9004,9005,9006,9007,9008,9009) then 'Fresh'
					 when BUSINESS_UNIT_NO=51 then 'Fashion'
					 when BUSINESS_UNIT_NO=52 and SUBGROUP_NO<>715 then 'Home'
					 when BUSINESS_UNIT_NO=53 then 'Connect'
					 when BUSINESS_UNIT_NO=54 then 'Beauty'
					 when BUSINESS_UNIT_NO=55 then 'CRG'
				else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY2 ,
				case when GROUP_NO=1 then 'Womens Outerwear'
					 when GROUP_NO=2 then 'Womens Lingerie'
					 when GROUP_NO=3 then 'Kidswear'
					 when GROUP_NO=4 then 'Trenery'
					 when GROUP_NO=5 then 'Menswear'
					 when GROUP_NO=6 then 'Womens Footwear and Accessories'
					 when DEPARTMENT_NO=172 then 'Bathroom'
					 when DEPARTMENT_NO=173 then 'Bedroom'
					 when DEPARTMENT_NO=174 then 'Soft Furnishing'
					 when DEPARTMENT_NO=176 then 'Kitchen'
					 when DEPARTMENT_NO=521 then 'Dining'
					 when DEPARTMENT_NO=544 then 'Wrapping Solutions'
					 when DEPARTMENT_NO in (695,696) then 'Home Brands'
					 when DEPARTMENT_NO=697 then 'Events'
					 when SUBGROUP_NO=280 then 'Beauty Private Label'
					 when SUBGROUP_NO=233 then 'Beauty Brands'
					 when SUBGROUP_NO=212 then 'Airtime'
					 when SUBGROUP_NO=446 then 'Cellular'
					 when GROUP_NO=12 then 'Country Road'
					 when GROUP_NO=13 then 'Witchery'
					 when GROUP_NO=14 then 'Mimco'
					 when GROUP_NO=9000 then 'Groceries'
					 when GROUP_NO=9001 then 'Wine/Beverages/Liquor'
					 when GROUP_NO=9002 then 'Snacking/Gifting'
					 when GROUP_NO=9004 then 'Prepaded/Deli'
					 when GROUP_NO=9005 then 'Bakery'
					 when GROUP_NO=9006 then 'Produce/Horti'
					 when GROUP_NO=9007 then 'Protein'
					 when GROUP_NO=9008 then 'Dairy'
					 when GROUP_NO=9009 then 'Foodservices'
					 when GROUP_NO=9010 then 'Home/Personal/Pet'
					 when GROUP_NO=9041 then 'Frozens'
					 when BUSINESS_UNIT_NO=70 then 'Non-Merchandise'
				else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY3 ,
				case when BUSINESS_UNIT_NO=50 then 'Others'
					 when GROUP_NO=4 then 'Trenery'
					 when GROUP_NO=12 then 'Country Road'
					 when GROUP_NO=13 then 'Witchery'
					 when GROUP_NO=14 then 'Mimco'
					 when SUBGROUP_NO in (93,261) then 'Classic Collection'
					 when DEPARTMENT_NO=684 then 'Classic Collection'
					 when DEPARTMENT_NO in (105,110,147,665,678,682,692,712) then 'EDITION.'
					 when DEPARTMENT_NO in (107,139,519,658,685,695) then 'studio.w'
					 when DEPARTMENT_NO in (109,150,659) then 'RE:'
					 when DEPARTMENT_NO=512 then 'jtone'
					 when DEPARTMENT_NO=698 then 'Distraction'
					 when DEPARTMENT_NO=664 then 'Soft and Flexy'
					 when DEPARTMENT_NO=123 then 'Modern'
					 when DEPARTMENT_NO in (702,704) then 'SAF'
					 when DEPARTMENT_NO in (163,687,158) then '(&US)'
					 when DEPARTMENT_NO=650 then 'Early Learning Centre'
					 when DEPARTMENT_NO in (159,548) and SUBCLASS_NO not in (1274,1987,9229) then 'Schoolwear'
					 when DEPARTMENT_NO in (119,121,126,696) then 'W Collection'
					 when DEPARTMENT_NO=526 then 'Sanctuary'
					 when DEPARTMENT_NO=651 then 'Eye Candy'
					 when DEPARTMENT_NO=654 then 'Fox Box'
					 when DEPARTMENT_NO=707 then 'Clarins'
					 when DEPARTMENT_NO=193 then 'MTN'
					 when DEPARTMENT_NO=194 then 'Vodacom'
					 when DEPARTMENT_NO=195 then 'Cell C'
					 when DEPARTMENT_NO=532 then 'Telkom'
					 when CLASS_NO in (1701,3227,3576,4976,5602) then 'Classic Collection'
					 when CLASS_NO in (1136,1706,2686,3232,4384,4973,5120,5607) then 'Modern'
					 when CLASS_NO in (2229,1285) then 'studio.w'
					 when CLASS_NO in (1255,1266) then 'AU'
					 when CLASS_NO=1132 then 'Lingerie Collection'
					 when CLASS_NO=1608 then 'Premium Collection'
					 when CLASS_NO in (1090,1278) then '(&US)'
					 when CLASS_NO in (1859,1882) then 'Walkmates'
					 when CLASS_NO in (1455,1459,1460) and SUBCLASS_NO not in (3954,9049) then 'W Beauty'
					 when CLASS_NO=1797 then 'Longmarket'
					 when CLASS_NO=4716 then 'QVS'
					 when CLASS_NO=5345 then 'SAVI'
					 when CLASS_NO=1013 then 'Payot'
					 when CLASS_NO=1035 then 'Ciate'
					 when CLASS_NO=1070 then 'MSLONDON'
					 when CLASS_NO=1078 then 'Billion Dollar Brows'
					 when CLASS_NO=1146 then 'Chanel'
					 when CLASS_NO=1170 then 'Glam Glow'
					 when CLASS_NO=1183 then 'Estee Lauder'
					 when CLASS_NO=1188 then 'Clinique'
					 when CLASS_NO=1198 then 'Bobbi Brown'
					 when CLASS_NO=1383 then 'Alaia'
					 when CLASS_NO=1400 then 'Bvlgari'
					 when CLASS_NO=1411 then 'Burberry'
					 when CLASS_NO=1416 then 'Issey Miyake'
					 when CLASS_NO=1436 then 'Coach'
					 when CLASS_NO=1443 then 'Elie Saab'
					 when CLASS_NO=1453 then 'Hermes'
					 when CLASS_NO=1461 then 'Narciso Rodriguez'
					 when CLASS_NO=1474 then 'Clarins'
					 when CLASS_NO=1540 then 'Elizabeth Arden'
					 when CLASS_NO=1550 then 'Lancome'
					 when CLASS_NO=1557 then 'La Prairie'
					 when CLASS_NO=1563 then 'Dr. Hauschka'
					 when CLASS_NO=1568 then 'Hugo Boss'
					 when CLASS_NO=1572 then 'Lacoste'
					 when CLASS_NO=1576 then 'Gucci'
					 when CLASS_NO=1580 then 'Mugler'
					 when CLASS_NO=1584 then 'Azzaro'
					 when CLASS_NO=1588 then 'Calvin Klein'
					 when CLASS_NO=1592 then 'Cartier'
					 when CLASS_NO=1596 then 'Davidoff'
					 when CLASS_NO=1604 then 'Givenchy'
					 when CLASS_NO=1610 then 'Marc Jacobs'
					 when CLASS_NO=1617 then 'Chloe'
					 when CLASS_NO=1627 then 'Joop'
					 when CLASS_NO=1633 then 'Missoni'
					 when CLASS_NO=1657 then 'Paco Rabanne'
					 when CLASS_NO=1661 then 'Valentino'
					 when CLASS_NO=1665 then 'Versace'
					 when CLASS_NO=1669 then 'Donna Karan'
					 when CLASS_NO=1673 then 'Aramis'
					 when CLASS_NO=1676 then 'Michael Kors'
					 when CLASS_NO=1681 then 'Zegna'
					 when CLASS_NO=1684 then 'Lab Series'
					 when CLASS_NO=1688 then 'Jean Paul Gaultier'
					 when CLASS_NO=1692 then 'Zadig&Voltaire'
					 when CLASS_NO=1696 then 'Van Cleef & Arpels'
					 when CLASS_NO=1703 then 'Stella Mccartney'
					 when CLASS_NO=1709 then 'Alexander Mcqueen'
					 when CLASS_NO=1712 then 'Carolina Herrera'
					 when CLASS_NO=1722 then 'Roberto Cavalli'
					 when CLASS_NO=1777 then 'Yves Saint Laurent'
					 when CLASS_NO=1781 then 'Giorgio Armani'
					 when CLASS_NO=1785 then 'Dolce&Gabanna'
					 when CLASS_NO=1801 then 'La Mer'
					 when CLASS_NO=1806 then 'Tom Ford Beauty'
					 when CLASS_NO=1815 then 'Jo Malone London'
					 when CLASS_NO=1825 then 'Salvatore Ferragamo'
					 when CLASS_NO=1848 then 'Cowshed'
					 when CLASS_NO=1855 then 'LOCCITANE'
					 when CLASS_NO=2024 then 'Mont Blanc'
					 when CLASS_NO=2028 then 'Dunhill'
					 when CLASS_NO=2083 then 'Charlotte Rhys'
					 when CLASS_NO=2135 then 'Suki Suki Naturals'
					 when CLASS_NO=2137 then 'Skin Creamery'
					 when CLASS_NO=2139 then 'Acqua Di Parma'
					 when CLASS_NO=2144 then 'Vita Liberata'
					 when CLASS_NO=3527 then 'Nesti Soaps'
					 when CLASS_NO=4118 then 'Dior'
					 when CLASS_NO=4804 then 'Revlon'
					 when CLASS_NO=4820 then 'Stila'
					 when CLASS_NO=5413 then 'Morgan Taylor'
					 when CLASS_NO=5472 then 'Opi'
					 when CLASS_NO=5927 then 'Nuxe'
					 when CLASS_NO=5951 then 'Sampar'
					 when CLASS_NO=9068 then 'Ren'
					 when CLASS_NO=9070 then 'Decleor'
					 when CLASS_NO=9071 then 'Gatineau'
					 when CLASS_NO=9085 then 'Mavala'
					 when CLASS_NO=9122 then 'Vichy'
					 when CLASS_NO=9147 then 'Smashbox'
					 when CLASS_NO=9159 then 'Tommy Hilfiger'
					 when CLASS_NO=9369 then 'Yves Rocher'
					 when CLASS_NO in (5306,5321,5324) then 'Telkom'
					 when CLASS_NO=5310 then 'Cell C'
					 when CLASS_NO=5314 then 'MTN'
					 when CLASS_NO=5318 then 'Neotel'
					 when CLASS_NO=5327 then 'Virgin'
					 when CLASS_NO=5331 then 'Vodacom'
					 when SUBCLASS_NO in (1302,1307,1324,2547,2552,2553,2554,2680,2685,3301,3303,3429,3766,5876,3860,3863,3867,4621,4754,4856,
											 4868,4870,5128,5129,5728,7141) then 'Classic Collection'
					 when SUBCLASS_NO in (2378,2681,2683,2684,3096,3393,3765,3811,3861,3864,3868,3978,4304,5609,5611,5875,7015) then 'Modern'
					 when SUBCLASS_NO in (2548,2550,2551,3012,3010,5126,5125,5132,7146) then 'EDITION.'
					 when SUBCLASS_NO in (1121,1129,1134,1138,1140,1308,1317,1811,2465,3009,4622,5062) then 'studio.w'
					 when SUBCLASS_NO in (1125,1130,1137,1139,1142,1316,1318,1812,2467,3453,7179) then 'RE:'
					 when SUBCLASS_NO in (3954,4214,4467,9163,9049) then 'jtone'
					 when SUBCLASS_NO in (1274,1987,9229) then 'Walkmates'
					 when SUBCLASS_NO in (5157,5158,5159,5160) then 'Heatgen'
					 when SUBCLASS_NO=1814 then 'Branded Kitchen Appliances'
					 when SUBCLASS_NO=5989 then 'Branded Kitchen Cookware'
					 when SUBCLASS_NO=5990 then 'Branded Kitchen Kitchen Accessories'
					 when SUBCLASS_NO=5991 then 'Branded Kitchen Knives'
					 when SUBCLASS_NO=5993 then 'Branded Dining Drinkware'
					 when SUBCLASS_NO=5994 then 'Branded Dining Cutlery'
					 when SUBCLASS_NO=1833 then 'Bath Time'
					 when SUBCLASS_NO=2034 then 'Le Bain'
					 when SUBCLASS_NO=2207 then 'Every Day'
					 when SUBCLASS_NO=3100 then 'Unwind'
					 when SUBCLASS_NO=3403 then 'African'
					 when SUBCLASS_NO=4536 then 'Ingredients'
					 when SUBCLASS_NO=4537 then 'Fresh Delights'
					 when SUBCLASS_NO=4774 then 'Love Your Skin'
					 when SUBCLASS_NO=9025 then 'Extracts From Nature'
					 when SUBCLASS_NO=1253 then 'Simply Florals'
					 when SUBCLASS_NO=2021 then 'Belle Maison'
					 when SUBCLASS_NO=2896 then 'Classic Collection'
					 when SUBCLASS_NO=5154 then 'Bliss'
					 when SUBCLASS_NO=5861 then 'AG Mobile'
					 when SUBCLASS_NO=5862 then 'Mobicel'
					 when SUBCLASS_NO=5955 then 'Hisense'
				else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY4 ,
				case when BUSINESS_UNIT_NO=50 then 'Others'
					 when GROUP_NO in (1,2,6,14) then 'Women'
					 when GROUP_NO=5 then 'Men'
					 when GROUP_NO=3 then 'Kids'
					 when SUBGROUP_NO in (392,422,426) then 'Women'
					 when SUBGROUP_NO in (423,427) then 'Men'
					 when SUBGROUP_NO in (337,393,424) then 'Kids'
					 when DEPARTMENT_NO in (108,112,113,119,121,126,139,514,526,554,610,651,654,683,707) then 'Women'
					 when DEPARTMENT_NO in (141,552,642) then 'Men'
					 when DEPARTMENT_NO=136 then 'Kids'
					 when CLASS_NO in (1013,1035,1070,1078,1170,1198,1383,1421,1443,1451,1455,1540,1550,1557,1563,1610,1617,1633,1703,1709,
										 1797,1801,1855,2135,2137,2144,3527,4118,4820,5413,5472,5927,5951,9068,9071,9085,9147,9369) then 'Women'
					 when CLASS_NO in (1673,1681,1684,2028) then 'Men'
					 when CLASS_NO in (1714,2044,4014,2035,2047) then 'Kids'
					 when SUBCLASS_NO in (1406,1413,1427,1442,1457,1549,1556,1562,1567,1844,1966,2401,2756,3471,4214,4463,4467,4725,4805,4806,
										4807,4808,4809,4810,5293,5857,8698,9020,9021,9022,9049,9081,9082,9126,9163,1467,1570,1574,1578,1582,1586,1590,1594,1606,
										1599,1690,1694,1699,1720,1754,1779,1783,1787,1826,2026,1629,1659,1663,1667,1671,1678,3677,1147,1148,1154,1160,1184,1185,
										1794,1190,1191,1195,1490,1507,1522,1523,1807,1823,1834) then 'Women'
				     when SUBCLASS_NO in (1410,1415,1435,1458,1824,2402,2757,4038,4469,4811,5858,8687,9032,9083,1468,1571,1575,1579,1583,1587,
											1591,1595,1607,1601,1691,1695,1702,1721,1776,1780,1784,1788,1827,2027,1632,1660,1664,1668,1672,1680,3680,1162,1186,1196,
											1537,1809) then 'Men'
				     when SUBCLASS_NO in (2384,4799,6043,9034,9051) then 'Kids'
                else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY5 ,
				case when BUSINESS_UNIT_NO=50 then 'Others'
					 when GROUP_NO=1 then 'Outerwear'
					 when GROUP_NO=14 and CLASS_NO<>5248 then 'Accessories'
					 when GROUP_NO=7 then 'Homeware'
					 when GROUP_NO=9 then 'Cellular and Airtime'
					 when SUBGROUP_NO in (261,750) and CLASS_NO not in (1790,4296,4588) then 'Outerwear'
					 when SUBGROUP_NO=200 then 'Footwear'
					 when SUBGROUP_NO=366 then 'Accessories'
					 when SUBGROUP_NO=290 then 'Underwear'
					 when SUBGROUP_NO in (425,753) then 'Homeware'
					 when SUBGROUP_NO=754 then 'Beauty Services'
					 when DEPARTMENT_NO in (108,112,113,119,121,130,136,141,157,158,159,162,163,514,523,528,537,548,551,552,554,566,570,575,
											 576,577,578,580,583,589,590,610,642,670,673,674,683,687)
					 and CLASS_NO not in (1270,1275,1329,1330,4401,5918,9192,9391,
											 9478,9479,9494,9495,9531,9533,9551,9555) then 'Outerwear'
					 when DEPARTMENT_NO in (123,153,160,165,684) and SUBCLASS_NO not in (4072,4183,6529,6546) then 'Sleepwear'
					 when DEPARTMENT_NO in (128,171,179,185,663,672,711) then 'Footwear'
					 when DEPARTMENT_NO in (124,126,139,154,620) then 'Underwear'
					 when DEPARTMENT_NO in (129,155) then 'Hosiery and Socks'
					 when DEPARTMENT_NO in (555,562,650) then 'Homeware'
					 when DEPARTMENT_NO in (115,116,567,571,581,585,586,653,671,675,677) and CLASS_NO not in (2995,2996,3318,3327,3338,3343,
																												 5274,5349,9451,9453) and SUBCLASS_NO<>5410 then 'Accessories'
					 when CLASS_NO in (1338,1360,4859,5622) then 'Outerwear'
					 when CLASS_NO in (1270,1329,2995,3327,3338,5248,5639,9192,9451) then 'Footwear'
					 when CLASS_NO in (1275,1790,4296,4588,9479,9495,9533,9555) then 'Accessories'
					 when CLASS_NO in (1773,1995,2010,2655,2661,4401,4887,4890,4892,4903,4906,5633,5773) then 'Underwear'
					 when CLASS_NO in (1330,2002,2012,2996,3318,3343,4899,5274,5349,5918,9453) then 'Hosiery and Socks'
					 when CLASS_NO in (1361,1771,2650,5484,5766,9391,9478,9494,9531,9551) then 'Sleepwear'
					 when CLASS_NO=1459 then 'Beauty Skin'
					 when CLASS_NO=1455 then 'Beauty Colour'
					 when CLASS_NO in (2392,9033) then 'Beauty Gifting and Special Occasions'
					 when CLASS_NO in (1763,1764,4716,5345) then 'Beauty Accessories and Bags'
					 when SUBCLASS_NO in (1895,4529,4931,4933,6423,6424) then 'Outerwear'
					 when SUBCLASS_NO in (1352,4072,4183,5410,5620,6529,6546) then 'Footwear'
					 when SUBCLASS_NO in (1359,1852,3740,4932,5621,6421) then 'Accessories'
					 when SUBCLASS_NO in (4525,4526) then 'Underwear'
					 when SUBCLASS_NO in (4078) then 'Hosiery and Socks'
					 when SUBCLASS_NO in (1014,1178,1802,2138,2145,5928,5952,9078,9081,9084,9126,9323,4315,1818,1147,1184,1190,1507,1547,1553,
											 1560,1564,1834,4774,1966,9020,9032,1021,1839,1843,2136,1362,1366,9079,9082,9083,1368,1369,1371,4038,4725,1537) then 'Beauty Skin'
					 when SUBCLASS_NO in (1182,1803,4316,1067,4807,5418,5473,9090,9325,1148,1794,1191,1523,1545,1554,1559,1566,1823,9644,1038,
											 1040,1042,1069,1071,1077,1113,1079,1202,1203,1205,1206,1207,1840,1373,4805,4806,4808,4809,5293,1374,4821,4822,4823,4824,
											 1375,5417,5474,5476,5478,5479,1854,9088,9089,1381,2848,2850,2851,9150) then 'Beauty Colour'
					 when SUBCLASS_NO in (4317,1847,4810,4811,1856,2086,1816,2141,1160,1162,1185,1186,1195,1196,1490,1546,1551,1558,8687,8698,
											 9049,1388,1397,1402,1406,1410,1412,1413,1415,1422,1427,1435,1441,1442,1824,1446,1452,1456,1457,1458,1462,1467,1468,1569,
											 1570,1571,1573,1574,1575,1577,1578,1579,1581,1582,1583,1585,1586,1587,1589,1590,1591,1593,1594,1595,1605,1606,1607,1598,
											 1599,1601,1614,1615,1621,1622,1628,1629,1632,1641,1643,1658,1659,1660,1662,1663,1664,1666,1667,1668,1670,1671,1672,1674,
											 1675,1677,1678,1680,1682,1683,1685,1686,1687,1689,1690,1691,1693,1694,1695,1698,1699,1702,1704,1708,1710,1711,1715,1720,
											 1721,1753,1754,1776,1778,1779,1780,1782,1783,1784,1786,1787,1788,1817,1819,1820,1826,1827,1828,2025,2026,2027,2030,2031,
											 2142,4123,9099,3677,3680,9161,9383,1807,1809) then 'Beauty Fragrance'
					 when SUBCLASS_NO in (1849,1850,1851,1945,2085,2087,3528,4287,9327,1833,2034,2207,3100,3403,4536,4537,9025,1253,2021,2896,
											 5154,7797,4207,4208,2211,4214,1798,1799,1800,1154,1522,1548,1555,1561,1565) then 'Beauty Bath and Body'
				     when SUBCLASS_NO in (1169,1187,1197,1539,1549,1556,1562,1567,1796,1810) then 'Beauty Gifting and Special Occasions'
				else 'Others' end as ALTERNATE_PRODUCT_HIERARCHY6,
				case when a.TILL_NO=997 then 3
					when a.TILL_NO=999 then 2
				else 1 end as SALES_CHANNEL_CODE,
				a.area_no,a.area_name,a.region_no,a.region_name,a.location_name,nvl(a.alternate_location_hierarchy1,'No Value') as alternate_location_hierarchy1,
				a.alternate_location_hierarchy2, a.alternate_location_hierarchy3 , a.alternate_location_hierarchy4,
				a.alternate_location_hierarchy5 , a.alternate_location_hierarchy6,
				nvl(a.discount_code,0) as discount_code,nvl(a.RMS_PROMOTION_NO,'No Value') as RMS_PROMOTION_NO,nvl(a.ATG_PROMOTION_NO,'No Value') as ATG_PROMOTION_NO ,nvl(a.ATG_LOYALTY_PROMOTION_NO,'No Value') as ATG_LOYALTY_PROMOTION_NO,nvl(a.EOL_PROMOTION_NO,'No Value') as EOL_PROMOTION_NO,
				nvl(a.rms_discount_selling,0) as rms_discount_selling,  nvl(a.RMS_DISCOUNT_SELLING_VAT_EXCL,0) as RMS_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.loyalty_discount_selling,0) as loyalty_discount_selling, nvl(a.LOYALTY_DISCOUNT_SELLING_VAT_EXCL,0) as LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.atg_discount_selling,0) as atg_discount_selling,  nvl(a.ATG_DISCOUNT_SELLING_VAT_EXCL,0) as ATG_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.atg_loyalty_discount_selling,0) as atg_loyalty_discount_selling, nvl(a.ATG_LOYALTY_DISCOUNT_SELLING_VAT_EXCL,0) as ATG_LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.eol_discount_selling,0) as eol_discount_selling, nvl(a.EOL_DISCOUNT_SELLING_VAT_EXCL,0) as EOL_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.wfs_discount_selling,0) as wfs_discount_selling,  nvl(a.WFS_DISCOUNT_SELLING_VAT_EXCL,0) as WFS_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.staff_discount_selling,0) as staff_discount_selling, nvl(a.STAFF_DISCOUNT_SELLING_VAT_EXCL,0) as STAFF_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.VOUCHER_DISCOUNT_SELLING,0) as VOUCHER_DISCOUNT_SELLING, nvl(a.VOUCHER_DISCOUNT_SELLING_VAT_EXCL,0) as VOUCHER_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.other_discount_selling,0) as other_discount_selling,nvl(a.OTHER_DISCOUNT_SELLING_VAT_EXCL,0) as OTHER_DISCOUNT_SELLING_VAT_EXCL,--p2
				nvl(a.MARKDOWN_SEQ_NO,0) as MARKDOWN_SEQ_NO,nvl(a.store_card_tender_count,0) as store_card_tender_count,nvl(a.store_card_tran_tender_selling,0) as store_card_tran_tender_selling,
				nvl(a.credit_card_tender_count,0) as credit_card_tender_count, nvl(a.credit_card_tran_tender_selling,0) as credit_card_tran_tender_selling,
				nvl(a.gift_card_tender_count,0) as gift_card_tender_count, nvl(a.gift_card_tran_tender_selling,0) as gift_card_tran_tender_selling,
				nvl(a.alien_card_tender_count,0) as alien_card_tender_count, nvl(a.alien_card_tran_tender_selling,0) as alien_card_tran_tender_selling,
				nvl(a.cash_tender_ind,0) as cash_tender_ind, nvl(a.cash_tran_tender_selling,0) as cash_tran_tender_selling,
				nvl(a.other_tender_count,0) as other_tender_count, nvl(a.other_tran_tender_selling,0) as other_tran_tender_selling,
				---1 as voucher_no,
				nvl(a.voucher_tender_count,0) as voucher_tender_count, nvl(a.voucher_tran_tender_selling,0) as voucher_tran_tender_selling,
				nvl(a.ucid,'No Value') as ucid,
			    a.CUSTOMER_COHORT_FY,
				a.customer_cohort_fh,
                a.customer_cohort_fq,
                a.customer_cohort_fm,
                'No Value' as customer_cohort_fw,
				nvl(a.age,0) as age,
				a.age_band as age_band_fy,
				'No Value' as age_band_fh,
			    'No Value' as age_band_fq,
			    'No Value' as age_band_fm,
			    'No Value' as age_band_fw,
				case when a.gender='u' or a.gender is null then 'NO VALUE' else a.gender end as gender,
				case when a.derived_race='RACE UNKNOWN' or a.derived_race is null then 'NO VALUE' else a.derived_race end as derived_race,a.acquisition_date,
				a.HOUSEHOLD_INCOME_BAND_FY, a.MACRO_SEGMENT_FY , a.MICRO_SEGMENT_FY ,
				-1 as EMPLOYEE_STATUS_CODE,
				-1 as store_card_count,             --p2
				-1 as wrewards_card_count,          --p2
				-1 as myschool_card_count,          --p2
				-1 as credit_card_count,            --p2
				-1 as littleworld_membership_count, --p2
				-1 as vitality_membership_count,    --p2
				-1 as non_rewards_card_count       --p2
				,nvl(d.UDA_104_VALUE_NO,'0') as UDA_104_VALUE_NO
				,nvl(d.UDA_104_VALUE_DESC,'No Value') as UDA_104_VALUE_DESC
				,nvl(d.UDA_300_VALUE_NO,'0') as UDA_300_VALUE_NO
				,nvl(d.UDA_300_VALUE_DESC,'No Value') as UDA_300_VALUE_DESC
				,nvl(d.UDA_306_VALUE_NO,'0') as UDA_306_VALUE_NO
				,nvl(d.UDA_306_VALUE_DESC,'No Value') as UDA_306_VALUE_DESC
				,nvl(d.UDA_310_VALUE_NO,'0') as UDA_310_VALUE_NO
				,nvl(d.UDA_310_VALUE_DESC,'No Value') as UDA_310_VALUE_DESC
				,nvl(d.UDA_316_VALUE_NO,'0') as UDA_316_VALUE_NO
				,nvl(d.UDA_316_VALUE_DESC,'No Value') as UDA_316_VALUE_DESC
				,nvl(d.UDA_320_VALUE_NO,'0') as UDA_320_VALUE_NO
				,nvl(d.UDA_320_VALUE_DESC,'No Value') as UDA_320_VALUE_DESC
				,nvl(d.UDA_327_7703_7707_7708_VALUE_NO,'0') as UDA_327_7703_7707_7708_VALUE_NO
				,nvl(d.UDA_327_7703_7707_7708_VALUE_DESC,'No Value') as UDA_327_7703_7707_7708_VALUE_DESC
				,nvl(d.UDA_2301_VALUE_NO,'0') as UDA_2301_VALUE_NO
				,nvl(d.UDA_2301_VALUE_DESC,'No Value') as UDA_2301_VALUE_DESC
				,nvl(d.UDA_7702_VALUE_NO,'0') as UDA_7702_VALUE_NO
				,nvl(d.UDA_7702_VALUE_DESC,'No Value') as UDA_7702_VALUE_DESC
				,nvl(d.UDA_7704_VALUE_NO,'0') as UDA_7704_VALUE_NO
				,nvl(d.UDA_7704_VALUE_DESC,'No Value') as UDA_7704_VALUE_DESC
				,nvl(a.VITALITY_UDA_VALUE_NO,-1) as VITALITY_UDA_VALUE_NO,
				nvl(a.wrewards_swipe_ind,0) as wrewards_swipe_ind, nvl(a.myschool_swipe_ind,0) as myschool_swipe_ind,
				a.VMP_IND,
				a.TRAN_DATE||'-'||a.LOCATION_NO||'-'||a.TILL_NO||'-'||a.TRAN_NO as basket_id,'1900-01-01' as LAST_UPDATED_DATE
				--b.LOYALTY_PROMOTION_NO,  --p2 not there in excel sheet
				--b.WFS_PROMOTION_NO,      --p2  not there in excel sheet
				--b.STAFF_PROMOTION_NO,    --p2  not there in excel sheet
				--b.FRANCHISE_PROMOTION_NO ,--p2  not there in excel sheet
		FROM #WNS_CUST_BASKET_ITEM_TEMP a
		LEFT JOIN #wns_nm_fnd_item b
				ON A.ITEM_NO = B.ITEM_NO
		left join development.wns_hs_Item_Colour_Family c
				ON A.ITEM_NO = c.ITEM_NO
		left join #wns_kr_uda_info d
				ON A.ITEM_NO = d.ITEM_NO
		left join #wns_kr_Tran_discount_selling_vat_exc E
				ON A.TRAN_DATE = E.TRAN_DATE
					AND A.LOCATION_NO = E.LOCATION_NO
					AND A.TILL_NO = E.TILL_NO
					AND A.TRAN_NO = E.TRAN_NO)$[vLimit];

DROP TABLE IF EXISTS #WNS_CUST_BASKET_ITEM_TEMP ;
DROP TABLE IF EXISTS #wns_nm_fnd_item ;
DROP TABLE IF EXISTS #wns_kr_uda_info;
DROP TABLE IF EXISTS #wns_kr_Tran_discount_selling_vat_exc;

/******************************************************************************************************************************************/
/* SCRIPT E - END                                                                                                         *****************/
/******************************************************************************************************************************************/

/******************************************************************************************************************************************/
/* SCRIPT F - Combining One time run Base table with Base_Table_One_Day_Data(formed above)                                  *****************/
/******************************************************************************************************************************************/
DROP TABLE IF EXISTS DEVELOPMENT.TEMP_CONS_CUST_BASKET_ITEM_$[vFinYearWeekNoDay];
CREATE TABLE DEVELOPMENT.TEMP_CONS_CUST_BASKET_ITEM_$[vFinYearWeekNoDay]
AS
(SELECT * FROM DEVELOPMENT.$[vCBI])  --One Time run base table  DEVELOPMENT.CUST_BASKET_ITEM_{3}
UNION ALL
(SELECT * FROM DEVELOPMENT.CUST_BASKET_ITEM_$[vDayName])  --daily run base table
;


-- Drop previous week's Base Table
TRUNCATE DEVELOPMENT.$[vCBI];

/******************************************************************************************************************************************/
/* SCRIPT G - Mapping updated UCIDs and other details in the consolidated base table formed in Script F                                  *****************/
/******************************************************************************************************************************************/
drop table if exists DEVELOPMENT.wns_kr_cust_card_mapping_$[vFinYearWeekNoDay];
Create Table DEVELOPMENT.wns_kr_cust_card_mapping_$[vFinYearWeekNoDay]
diststyle all as
(select perm_ucid_hashed, ucid_type
	from DEVELOPMENT.DIM_CUSTOMER_CARD_MAPPING
	group by 1,2
) $[vLimit];

--Execution time: 22.88s

DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_$[vFinYearWeekNoDay];
CREATE TABLE DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_$[vFinYearWeekNoDay] AS
      select
			b.tran_date, b.location_no, b.till_no, b.tran_no, B.perm_ucid_hashed as ucid,c.BIRTH_DATE,
			c.AGE_YEARS	,
			case when c.gender='u' or c.gender is null then 'NO VALUE' else c.gender end as gender,
			case when c.derived_race='RACE UNKNOWN' or c.derived_race is null then 'NO VALUE' else c.derived_race end as derived_race,
			d.ACQUISITION_DATE,f.ucid_type
			from
			development.CUST_BASKET_MAPPING b    -- for current ucid only we need to merge all this.
			left join
			DEVELOPMENT.WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName] c   -- for demographic  we will add age_band here.
			on b.perm_ucid_hashed = c.ucid
			left join
			DEVELOPMENT.WNS_NM_DD_CA_UCID_LEVEL_CUST_ACQ_mapping$[vDayName] d -- for aqusiotion date only
			on b.perm_ucid_hashed = d.ucid
			left join DEVELOPMENT.wns_kr_cust_card_mapping_$[vFinYearWeekNoDay] f  -- using ucid_types we will merge this also. not needed we can take this up from WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName]
			on b.perm_ucid_hashed = f.perm_ucid_hashed $[vLimit];
--Execution time: 32.83s
drop table if exists DEVELOPMENT.wns_kr_cust_card_mapping_$[vFinYearWeekNoDay];


DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_$[vFinYearWeekNoDay];
CREATE TABLE DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_$[vFinYearWeekNoDay] AS
SELECT *,
(a.tran_date -cast(BIRTH_DATE as date))/365 AS AGE_TD  ,
--- add age_fy this is a year wise age and fixed for each year.
max(AGE_TD) over (partition by ucid,b.fin_year_no ) as age_fy,
max(AGE_TD) over (partition by ucid,b.fin_year_no,b.FIN_HALF_NO ) as age_fh,
max(AGE_TD) over (partition by ucid,b.fin_year_no,b.FIN_HALF_NO,b.FIN_QUARTER_NO ) as age_fq,
max(AGE_TD) over (partition by ucid,b.fin_year_no,b.FIN_HALF_NO,b.FIN_QUARTER_NO,b.fin_month_no ) as age_fm,
max(AGE_TD) over (partition by ucid,b.fin_year_no,b.FIN_HALF_NO,b.FIN_QUARTER_NO,b.fin_month_no,b.FIN_WEEK_NO ) as age_fw
FROM DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_$[vFinYearWeekNoDay] A
LEFT JOIN (SELECT DISTINCT FIN_YEAR_NO, FIN_HALF_NO, FIN_QUARTER_NO, FIN_MONTH_NO, FIN_WEEK_NO ,CALENDAR_DATE FROM ANALYTICS.FND_CALENDAR) B
ON A.TRAN_DATE=B.CALENDAR_DATE
;
delete from DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_$[vFinYearWeekNoDay] where FIN_YEAR_NO<=2017;

DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_$[vFinYearWeekNoDay];
--Execution time: 42.19s
DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_$[vFinYearWeekNoDay];
CREATE TABLE DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_$[vFinYearWeekNoDay] AS
SELECT A.*,j.TIER_FY,j.TIER_FH,j.TIER_Fq,j.TIER_FM
FROM DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_$[vFinYearWeekNoDay] A
LEFT JOIN  development.wns_adj_tier_wise$[vDayName] j    -- for tier only we need to merge this also
ON A.fin_year_no = j.fin_year_no
AND A.fin_month_no = j.fin_month_no
AND A.ucid = j.ucid
;
create table development.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_LUD_$[vFinYearWeekNoDay]
DISTKEY(TRAN_DATE) COMPOUND SORTKEY(TRAN_DATE, LOCATION_NO, TILL_NO, TRAN_NO) as
select A.*,c.effective_from_date
from DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_$[vFinYearWeekNoDay] A
  left join (	select
	                        CAST (location_no as SMALLINT) as location_no,
	                        CAST (till_no as SMALLINT) as till_no,
	                        CAST (tran_no as INTEGER ) as tran_no,
	                        tran_date,effective_from_date,effective_to_date
	                        from development.cust_basket_mapping_tracking
	                        where effective_to_date is null and tran_date>='2017-06-26'
	                    ) c
        		ON A.TRAN_DATE = c.TRAN_DATE
					AND A.LOCATION_NO = c.LOCATION_NO
					AND A.TILL_NO = c.TILL_NO
					AND A.TRAN_NO = c.TRAN_NO
$[vLimit];

DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_$[vFinYearWeekNoDay];
DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_$[vFinYearWeekNoDay];
--Execution time: 37.92s
/******************************************************************************************************************************************/
/* END OF SCRIPT G - Mapping updated UCIDs and other details in the consolidated base table formed in Script F                                  *****************/
/******************************************************************************************************************************************/



INSERT INTO DEVELOPMENT.$[vCBI]
	 (
		SELECT a.tran_date, a.location_no, a.till_no, a.tran_no,
				a.tran_time,a.tran_ind,a.tran_type,a.tran_qty,
				a.tran_selling ,a.tran_selling_vat_excl ,--p2
				a.discount_selling,a.DISCOUNT_SELLING_VAT_EXCL,--p2
				a.fin_year_no, a.fin_half_no, a.fin_quarter_no, a.fin_month_no,
				a.fin_week_no, a.fin_day_no,a.season_no,a.weekday_weekend_code,
				a.TIME_OF_DAY_CODE,a.item_seq_no,
				a.item_no, a.item_level1_no, a.ITEM_SHORT_DESC,a.item_tran_type,
				a.item_tran_qty,a.item_tran_selling,a.ITEM_TRAN_SELLING_VAT_EXCL,
				a.item_discount_selling,a.ITEM_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.WASTE_DISCOUNT_PERC,a.vat_rate_perc,
				a.colour_family,a.BUSINESS_UNIT_NO,a.BUSINESS_UNIT_NAME,a.GROUP_NO,a.GROUP_NAME,
				a.SUBGROUP_NO,a.SUBGROUP_NAME, a.DEPARTMENT_NO,a.DEPARTMENT_NAME,a.CLASS_NO,a.CLASS_NAME,a.SUBCLASS_NO,a.SUBCLASS_NAME,
				a.ALTERNATE_PRODUCT_HIERARCHY1 ,
				a.ALTERNATE_PRODUCT_HIERARCHY2 ,
				a.ALTERNATE_PRODUCT_HIERARCHY3 ,
				a.ALTERNATE_PRODUCT_HIERARCHY4 ,
				a.ALTERNATE_PRODUCT_HIERARCHY5 ,
				a.ALTERNATE_PRODUCT_HIERARCHY6,
				a.SALES_CHANNEL_CODE,
				a.area_no,a.area_name,a.region_no,a.region_name,a.location_name,a.alternate_location_hierarchy1,
				a.alternate_location_hierarchy2, a.alternate_location_hierarchy3 , a.alternate_location_hierarchy4,
				a.alternate_location_hierarchy5 , a.alternate_location_hierarchy6,
				a.discount_code,a.RMS_PROMOTION_NO,a.ATG_PROMOTION_NO,a.ATG_LOYALTY_PROMOTION_NO,a.EOL_PROMOTION_NO,
				a.rms_discount_selling,  a.RMS_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.loyalty_discount_selling, a.LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.atg_discount_selling,  a.ATG_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.atg_loyalty_discount_selling, a.ATG_LOYALTY_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.eol_discount_selling, a.EOL_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.wfs_discount_selling,  a.WFS_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.staff_discount_selling, a.STAFF_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.VOUCHER_DISCOUNT_SELLING,
                a.VOUCHER_DISCOUNT_SELLING_VAT_EXCL,
				a.other_discount_selling,a.OTHER_DISCOUNT_SELLING_VAT_EXCL,--p2
				a.MARKDOWN_SEQ_NO,a.store_card_tender_count,a.store_card_tran_tender_selling,
				a.credit_card_tender_count, a.credit_card_tran_tender_selling,
				a.gift_card_tender_count, a.gift_card_tran_tender_selling,
				a.alien_card_tender_count, a.alien_card_tran_tender_selling,
				a.cash_tender_ind, a.cash_tran_tender_selling,
				a.other_tender_count, a.other_tran_tender_selling,
				--a.voucher_no,
				a.voucher_tender_count, a.voucher_tran_tender_selling,
				nvl(b.ucid ,'No Value') as ucid,
				--case when b.ucid_type in ('KNOWN') AND e.customer_current_tier_code IN (3,4) THEN 'WREWARDS Known VIP'
				--	when b.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
				--	WHEN b.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
				--	WHEN b.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				--	else 'CASH'
				--	END AS CUSTOMER_COHORT,--p2
				case when  b.ucid_type in ('KNOWN') AND b.tier_fy IN (3,4) THEN 'WREWARDS Known VIP'
					  when b.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN b.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN b.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FY,
				case when  b.ucid_type in ('KNOWN') AND b.tier_fh IN (3,4) THEN 'WREWARDS Known VIP'
					  when b.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN b.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN b.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FH,
				case when  b.ucid_type in ('KNOWN') AND b.tier_fq IN (3,4) THEN 'WREWARDS Known VIP'
					  when b.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN b.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN b.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FQ,
				case when  b.ucid_type in ('KNOWN') AND b.tier_fm IN (3,4) THEN 'WREWARDS Known VIP'
					  when b.ucid_type in ('KNOWN') THEN 'WREWARDS Known Base'
					  WHEN b.ucid_type in ('ORPHAN') THEN 'WREWARDS Orphan'
					  WHEN b.ucid_type in ('NON-REWARDS') THEN 'Non-Rewards'
				else 'CASH'
				END AS CUSTOMER_COHORT_FM,
	           'No Value' as customer_cohort_fw,
				nvl(b.age_td,0) as age,
				case when b.age_fy between 18 and 24 then '18-24'
					 when b.age_fy between 25 and 34 then '25-34'
					 when b.age_fy between 35 and 44 then '35-44'
					 when b.age_fy between 45 and 54 then '45-54'
					 when b.age_fy>=55 then '55+' else 'No Value' end as AGE_BAND_FY,--p2
                case when b.age_fh between 18 and 24 then '18-24'
					 when b.age_fh between 25 and 34 then '25-34'
					 when b.age_fh between 35 and 44 then '35-44'
					 when b.age_fh between 45 and 54 then '45-54'
					 when b.age_fh>=55 then '55+' else 'No Value' end as AGE_BAND_FH,--p2
                case when b.age_fq between 18 and 24 then '18-24'
					 when b.age_fq between 25 and 34 then '25-34'
					 when b.age_fq between 35 and 44 then '35-44'
					 when b.age_fq between 45 and 54 then '45-54'
					 when b.age_fq>=55 then '55+' else 'No Value' end as AGE_BAND_FQ,--p2
				case when b.age_fm between 18 and 24 then '18-24'
					 when b.age_fm between 25 and 34 then '25-34'
					 when b.age_fm between 35 and 44 then '35-44'
					 when b.age_fm between 45 and 54 then '45-54'
					 when b.age_fm>=55 then '55+' else 'No Value' end as AGE_BAND_FM,--p2
				case when b.age_fw between 18 and 24 then '18-24'
					 when b.age_fw between 25 and 34 then '25-34'
					 when b.age_fw between 35 and 44 then '35-44'
					 when b.age_fw between 45 and 54 then '45-54'
					 when b.age_fw>=55 then '55+' else 'No Value' end as AGE_BAND_FW,--p2
				case when b.gender='u' or b.gender is null then 'NO VALUE' else b.gender end as gender,
				case when b.derived_race='RACE UNKNOWN' or b.derived_race is null then 'NO VALUE' else b.derived_race end as derived_race,
				case WHEN b.ACQUISITION_DATE IS NULL THEN '1999-01-01'
					 WHEN b.ACQUISITION_DATE<'1999-01-01' THEN '1999-01-01' -- THE FIRST DATE IN CUST_BASKET IS 1999-06-04
	                 WHEN b.ACQUISITION_DATE>=(CURRENT_DATE+1) THEN CURRENT_DATE
				ELSE b.ACQUISITION_DATE END AS acquisition_date,
				a.HOUSEHOLD_INCOME_BAND_FY, a.MACRO_SEGMENT_FY , a.MICRO_SEGMENT_FY ,
				a.EMPLOYEE_STATUS_CODE, -- @adj sep
				a.store_card_count,             --p2
				a.wrewards_card_count,          --p2
				a.myschool_card_count,          --p2
				a.credit_card_count,            --p2
				a.littleworld_membership_count, --p2
				a.vitality_membership_count,    --p2
				a.non_rewards_card_count       --p2
				,nvl(a.UDA_104_VALUE_NO,'0') as UDA_104_VALUE_NO
				,nvl(a.UDA_104_VALUE_DESC,'No Value') as UDA_104_VALUE_DESC
				,nvl(a.UDA_300_VALUE_NO,'0') as UDA_300_VALUE_NO
				,nvl(a.UDA_300_VALUE_DESC,'No Value') as UDA_300_VALUE_DESC
				,nvl(a.UDA_306_VALUE_NO,'0') as UDA_306_VALUE_NO
				,nvl(a.UDA_306_VALUE_DESC,'No Value') as UDA_306_VALUE_DESC
				,nvl(a.UDA_310_VALUE_NO,'0') as UDA_310_VALUE_NO
				,nvl(a.UDA_310_VALUE_DESC,'No Value') as UDA_310_VALUE_DESC
				,nvl(a.UDA_316_VALUE_NO,'0') as UDA_316_VALUE_NO
				,nvl(a.UDA_316_VALUE_DESC,'No Value') as UDA_316_VALUE_DESC
				,nvl(a.UDA_320_VALUE_NO,'0') as UDA_320_VALUE_NO
				,nvl(a.UDA_320_VALUE_DESC,'No Value') as UDA_320_VALUE_DESC
				,nvl(a.UDA_327_7703_7707_7708_VALUE_NO,'0') as UDA_327_7703_7707_7708_VALUE_NO
				,nvl(a.UDA_327_7703_7707_7708_VALUE_DESC,'No Value') as UDA_327_7703_7707_7708_VALUE_DESC
				,nvl(a.UDA_2301_VALUE_NO,'0') as UDA_2301_VALUE_NO
				,nvl(a.UDA_2301_VALUE_DESC,'No Value') as UDA_2301_VALUE_DESC
				,nvl(a.UDA_7702_VALUE_NO,'0') as UDA_7702_VALUE_NO
				,nvl(a.UDA_7702_VALUE_DESC,'No Value') as UDA_7702_VALUE_DESC
				,nvl(a.UDA_7704_VALUE_NO,'0') as UDA_7704_VALUE_NO
				,nvl(a.UDA_7704_VALUE_DESC,'No Value') as UDA_7704_VALUE_DESC
				,a.VITALITY_UDA_VALUE_NO,a.wrewards_swipe_ind, a.myschool_swipe_ind,a.VMP_IND,
				a.basket_id,b.effective_from_date as LAST_UPDATED_DATE
				--a.LOYALTY_PROMOTION_NO,  --p2 not there in excel sheet
				--a.WFS_PROMOTION_NO,      --p2  not there in excel sheet
				--a.STAFF_PROMOTION_NO,    --p2  not there in excel sheet
				--a.FRANCHISE_PROMOTION_NO ,--p2  not there in excel sheet
		from
			DEVELOPMENT.TEMP_CONS_CUST_BASKET_ITEM_$[vFinYearWeekNoDay] a
			left join
			development.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_LUD_$[vFinYearWeekNoDay] b    --BC UCID gets updated (TTCI)
			on a.tran_date = b.tran_date
			and a.location_no = b.location_no
			and a.till_no = b.till_no
			and a.tran_no = b.tran_no
		   	)$[vLimit];


DROP TABLE IF EXISTS development.wns_adj_tier_wise$[vDayName];
DROP TABLE IF EXISTS #wns_kr_cust_card_mapping;
DROP TABLE IF EXISTS #wns_kr_tier_year_wise;
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_WNS_SD_TIER_UCID_LEVEL_$[vDayName];
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_DD_CA_UCID_LEVEL_CUST_ACQ_mapping$[vDayName];
DROP TABLE IF EXISTS DEVELOPMENT.WNS_NM_SD_DIM_CUSTOMER_DEMO_$[vDayName] ;
DROP TABLE IF EXISTS DEVELOPMENT.CUST_BASKET_ITEM_$[vDayName] ;
DROP TABLE IF EXISTS DEVELOPMENT.TEMP_CONS_CUST_BASKET_ITEM_$[vFinYearWeekNoDay] ;
DROP TABLE IF EXISTS DEVELOPMENT.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_$[vFinYearWeekNoDay];
DROP TABLE IF EXISTS development.WNS_ADJ_TRAN_DEMO_AQUI_TYPE_CAL_TIER_LUD_$[vFinYearWeekNoDay];
grant select on table DEVELOPMENT.$[vCBI] to public ;